from Utilitai import partitionimport time# Often changed parametersnuPadHard=0.495nuPadSoft=0.495rhoPadHard=1e-09rhoPadSoft=1e-09with open('fort.27') as fp:			Lines = fp.readlines()			nuPadHard = float(Lines[0].split('\\')[0])with open('fort.26') as fp:			Lines = fp.readlines()			nuPadSoft = float(Lines[0].split('\\')[0])with open('fort.25') as fp:			Lines = fp.readlines()			rhoPadHard = float(Lines[0].split('\\')[0])with open('fort.24') as fp:			Lines = fp.readlines()			rhoPadSoft = float(Lines[0].split('\\')[0])POURSUITE(PAR_LOT='NON')# ---------  PARAMETERS   -------------------------#Already define in phase 1. For pad stiffness we need only on pad :topNodes = ('topn')botNodes = ('botn')rfNodes = ('RF')hardElem = ('hard')softElem = ('soft')rf0dElem = ('RF0D')# --------- Materials --------------EtaHard=LIRE_FONCTION(UNITE = 39,                      NOM_PARA = 'FREQ',                      PROL_GAUCHE = 'CONSTANT',                      PROL_DROITE = 'CONSTANT')EHard=LIRE_FONCTION(UNITE = 38,                    NOM_PARA = 'FREQ',                    PROL_GAUCHE = 'CONSTANT',                    PROL_DROITE = 'CONSTANT')EtaSoft=LIRE_FONCTION(UNITE = 29,                      NOM_PARA = 'FREQ',                      PROL_GAUCHE = 'CONSTANT',                      PROL_DROITE = 'CONSTANT')ESoft=LIRE_FONCTION(UNITE = 28,                    NOM_PARA = 'FREQ',                    PROL_GAUCHE = 'CONSTANT',                    PROL_DROITE = 'CONSTANT')# ---------  Loads  --------------BCcomp = AFFE_CHAR_MECA(FORCE_NODALE=_F(FY=-1.0,                                         GROUP_NO=('RF', )),                         MODELE=model)BCtorX = AFFE_CHAR_MECA(FORCE_NODALE=_F(MX=1.0,                                         GROUP_NO=('RF', )),                         MODELE=model)BCtorZ = AFFE_CHAR_MECA(FORCE_NODALE=_F(MZ=1.0,                                         GROUP_NO=('RF', )),                         MODELE=model)BCshearZ = AFFE_CHAR_MECA(FORCE_NODALE=_F(FZ=1.0,                                         GROUP_NO=('RF', )),                         MODELE=model)BCloads = [BCcomp, BCtorX, BCtorZ, BCshearZ]fixedBC = (BCfix, RFCtltop, )# ---------  Solution  --------------fileName='fort.37'with open(fileName) as file:    freqlines = file.read().splitlines()file.close()listeAffe = []fileDisp=open('fort.40','w')fileDisp.close()for BCload in BCloads:    # --------- INIT OUTPUT FILES ------------------    fileDisp=open('fort.40','a+')    fileHeader='FREQ [Hz]\t'    if BCload == BCcomp :        name = 'vertical stiffness'        fileHeader += name + ' Real [N/mm]\t' + name + ' Imanginary [N/mm]\t'    elif BCload == BCtorX :        name = 'stiffness around X'        fileHeader += name + ' Real [Nmm/rad]\t' + name + ' Imanginary [Nmm/rad]\t'    elif BCload == BCtorZ :        name = 'stiffness around Z'        fileHeader += name + ' Real [Nmm/rad]\t' + name + ' Imanginary [Nmm/rad]\t'    else:        name = 'lateral stiffness'        fileHeader += name + ' Real [N/mm]\t' + name + ' Imanginary [N/mm]\t'    fileHeader+='\n'    fileDisp.write(fileHeader)    fileDisp.close()    first=True    for freqline in freqlines:        t0 = time.time()        try:            frequency=float(freqline.split(' ')[0])        except:            continue        EH=EHard(frequency)        EtaH=EtaHard(frequency)        padhard = DEFI_MATERIAU(ELAS=_F(AMOR_HYST=EtaH,                                        E=EH,                                        NU=nuPadHard,                                        RHO=rhoPadHard))        ES=ESoft(frequency)        EtaS=EtaSoft(frequency)        padsoft = DEFI_MATERIAU(ELAS=_F(AMOR_HYST=EtaS,                                        E=ES,                                        NU=nuPadSoft,                                        RHO=rhoPadSoft))        fieldmat = AFFE_MATERIAU(AFFE=(_F(GROUP_MA=hardElem,                                          MATER=(padhard, )),                                       _F(GROUP_MA=softElem,                                          MATER=(padsoft, ))),                                 MAILLAGE=mesh,                                 MODELE=model)          ASSEMBLAGE(CARA_ELEM=RFprop,                   CHAM_MATER=fieldmat,                   CHARGE=fixedBC,                   MATR_ASSE=(_F(MATRICE=CO('K'),                                 OPTION='RIGI_MECA'),                              _F(MATRICE=CO('Khyst'),                                 OPTION='RIGI_MECA_HYST'),                              _F(MATRICE=CO('M'),                                 OPTION='MASS_MECA')),                   MODELE=model,                   NUME_DDL=CO('nddl'),                   VECT_ASSE=_F(CHARGE=(BCload),                                OPTION='CHAR_MECA',                                VECTEUR=CO("f"))                   )        if freqline == freqlines[0]:            resharm = DYNA_VIBRA(BASE_CALCUL='PHYS',                                 CARA_ELEM=RFprop,                                 CHAM_MATER=fieldmat,                                 EXCIT=_F(COEF_MULT=1.0,                                          VECT_ASSE=f),                                 FREQ=(frequency),                                 MATR_MASS=M,                                 MATR_RIGI=Khyst,                                 MODELE=model,                                 SOLVEUR=_F(METHODE='MUMPS', RENUM='METIS', PCENT_PIVOT=150),                                 NOM_CHAM=('DEPL','VITE','ACCE'),                                 TYPE_CALCUL='HARM')        else:               resharm = DYNA_VIBRA(reuse = resharm,                                 RESULTAT = resharm,                                 BASE_CALCUL='PHYS',                                 CARA_ELEM=RFprop,                                 CHAM_MATER=fieldmat,                                 EXCIT=_F(COEF_MULT=1.0,                                          VECT_ASSE=f),                                 FREQ=(frequency),                                 MATR_MASS=M,                                 MATR_RIGI=Khyst,                                 MODELE=model,                                 SOLVEUR=_F(METHODE='MUMPS', RENUM='METIS', PCENT_PIVOT=150),                                 NOM_CHAM=('DEPL','VITE','ACCE'),                                 TYPE_CALCUL='HARM')            t00 = time.time()        print('harmonic f=' + str(int(frequency)) + 'Hz, ' + str(t00-t0) + ' s.')                               # Stiffness extraction loop        dataline=[str(frequency),]        if BCload == BCcomp :            DisplY = RECU_FONCTION(GROUP_NO=('RF', ),                                   NOM_CHAM='DEPL',                                   NOM_CMP='DY',                                   RESULTAT=resharm)            DisplY_R=CALC_FONCTION(EXTRACTION=_F(FONCTION=DisplY, PARTIE='REEL'))            DisplY_I=CALC_FONCTION(EXTRACTION=_F(FONCTION=DisplY, PARTIE='IMAG'))                        dataline.append(str(-DisplY_R(frequency)/(DisplY_R(frequency)*DisplY_R(frequency)+DisplY_I(frequency)*DisplY_I(frequency))))            dataline.append(str(DisplY_I(frequency)/(DisplY_R(frequency)*DisplY_R(frequency)+DisplY_I(frequency)*DisplY_I(frequency))))            DETRUIRE(CONCEPT=_F(NOM=(DisplY, DisplY_R, DisplY_I,)))        elif BCload == BCtorX :            RotX = RECU_FONCTION(GROUP_NO=('RF', ),                                 NOM_CHAM='DEPL',                                 NOM_CMP='DRX',                                 RESULTAT=resharm)            RotX_R=CALC_FONCTION(EXTRACTION=_F(FONCTION=RotX, PARTIE='REEL'))            RotX_I=CALC_FONCTION(EXTRACTION=_F(FONCTION=RotX, PARTIE='IMAG'))            dataline.append(str(RotX_R(frequency)/(RotX_R(frequency)*RotX_R(frequency)+RotX_I(frequency)*RotX_I(frequency))))            dataline.append(str(-RotX_I(frequency)/(RotX_R(frequency)*RotX_R(frequency)+RotX_I(frequency)*RotX_I(frequency))))            DETRUIRE(CONCEPT=_F(NOM=(RotX, RotX_R, RotX_I,)))        elif BCload == BCtorZ :            RotZ = RECU_FONCTION(GROUP_NO=('RF', ),                                 NOM_CHAM='DEPL',                                 NOM_CMP='DRZ',                                 RESULTAT=resharm)            RotZ_R=CALC_FONCTION(EXTRACTION=_F(FONCTION=RotZ, PARTIE='REEL'))            RotZ_I=CALC_FONCTION(EXTRACTION=_F(FONCTION=RotZ, PARTIE='IMAG'))            dataline.append(str(RotZ_R(frequency)/(RotZ_R(frequency)*RotZ_R(frequency)+RotZ_I(frequency)*RotZ_I(frequency))))            dataline.append(str(-RotZ_I(frequency)/(RotZ_R(frequency)*RotZ_R(frequency)+RotZ_I(frequency)*RotZ_I(frequency))))            DETRUIRE(CONCEPT=_F(NOM=(RotZ, RotZ_R, RotZ_I,)))        else:            DisplZ = RECU_FONCTION(GROUP_NO=('RF', ),                                   NOM_CHAM='DEPL',                                   NOM_CMP='DZ',                                   RESULTAT=resharm)            DisplZ_R=CALC_FONCTION(EXTRACTION=_F(FONCTION=DisplZ, PARTIE='REEL'))            DisplZ_I=CALC_FONCTION(EXTRACTION=_F(FONCTION=DisplZ, PARTIE='IMAG'))            dataline.append(str(DisplZ_R(frequency)/(DisplZ_R(frequency)*DisplZ_R(frequency)+DisplZ_I(frequency)*DisplZ_I(frequency))))            dataline.append(str(-DisplZ_I(frequency)/(DisplZ_R(frequency)*DisplZ_R(frequency)+DisplZ_I(frequency)*DisplZ_I(frequency))))            DETRUIRE(CONCEPT=_F(NOM=(DisplZ, DisplZ_R, DisplZ_I,)))        #  end displacement/rotations extraction loop: write data line to file        fileDisp=open('fort.40','a+')        fileContent='\t'.join(dataline) + '\n'        fileDisp.write(fileContent)        fileDisp.close()           DETRUIRE(CONCEPT=_F(NOM=(padsoft, padhard, fieldmat)))        # 'nddl' seems to be needed in IMPR_RESU() at the end        if BCload == BCloads[-1] and freqline == freqlines[-1]:            continue        else:            DETRUIRE(OBJET=_F(CHAINE=('K','Khyst','M','f','nddl')))    if BCload == BCloads[-1] and freqline == freqlines[-1]:            continue    else:        DETRUIRE(OBJET=_F(CHAINE=('resharm')))    # ------ END OF SOLUTION LOOP --------IMPR_RESU(INFO=2, FORMAT='MED',          RESU=_F(PARTIE='REEL',                  NOM_CHAM=('DEPL','VITE'),                  NOM_CHAM_MED = ('displacement', 'velocity'),                  RESULTAT=resharm,),                  # FREQ=frequency),          UNITE=81)EH=EHard(0)padhard = DEFI_MATERIAU(ELAS=_F(E=EH,                                NU=nuPadHard,))EH=ESoft(0)padsoft = DEFI_MATERIAU(ELAS=_F(E=EH,                                NU=nuPadSoft,))fieldmat = AFFE_MATERIAU(AFFE=(_F(GROUP_MA=hardElem,                                  MATER=(padhard, )),                               _F(GROUP_MA=softElem,                                  MATER=(padsoft, ))),                               MAILLAGE=mesh,                               MODELE=model)Comp = AFFE_CHAR_MECA(FORCE_NODALE=_F(FY=-1.0,                                      GROUP_NO=('RF', )),                      MODELE=model)BCbot = AFFE_CHAR_MECA(DDL_IMPO=_F(DX=0.0,                                   DY=0.0,                                   DZ=0.0,                                   GROUP_NO=('botn', )),                       MODELE=model)RFnTop = AFFE_CHAR_MECA(LIAISON_SOLIDE=_F(GROUP_NO=('topn', 'RF', ),					    DIST_MIN=1.8,), #Top nodes and RF node are link to be rigid                        MODELE=model)mest1 = MECA_STATIQUE(MODELE = model,                       CHAM_MATER=fieldmat,                      CARA_ELEM=RFprop,                      EXCIT=(_F(CHARGE=Comp),                             _F(CHARGE=BCbot),                             _F(CHARGE=RFnTop),                            ),                      )t_dY = POST_RELEVE_T(ACTION=_F (INTITULE = 'DEPL',                              RESULTAT = mest1,                              NOM_CHAM = 'DEPL',                              NOM_CMP = ('DY',),                              GROUP_NO = 'RF',                              OPERATION = 'EXTRACTION' , ) , )t_dY2 = t_dY.EXTR_TABLE()dY = t_dY2.DY[0]stiff= -0.001/dYfileDisp2=open('fort.41','w')fileDisp2.write('Static stiffness in compression: ' + str(stiff) + ' kN/mm')fileDisp2.close()FIN()