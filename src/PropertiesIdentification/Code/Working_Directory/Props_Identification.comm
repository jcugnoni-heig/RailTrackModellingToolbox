import json

DEBUT(LANG='EN', PAR_LOT='NON')

# Define default properties values

## Concrete
# allSlpProps = {'E_L' : 47000, #
#                'E_N' : 20000,
#                'E_T' : 20000,
#                'NU_LT' : 0.2, #
#                'NU_LN': 0.2,
#                'NU_TN' : 0.2,
#                'G_LT' : 20000, #
#                'G_LN': 20000,
#                'G_TN' : 8500,
#                'RHO' : 2.4356e-09}

## Wood
allSlpProps = {'E_L' : 10000, #
               'E_N' : 5000,
               'E_T' : 5000,
               'NU_LT' : 0.2, #
               'NU_LN': 0.2,
               'NU_TN' : 0.2,
               'G_LT' : 5000, #
               'G_LN': 5000,
               'G_TN' : 5000,
               'RHO' : 0.8e-09}

nModes = 17

nodesForDispl = ('n1', 'n2', 'n3', 'n4', 'n5', 'n6', 'n7', 'n8', 'n9', 'n10', 'n11', 'n12', 'n13', 'n14', )

# Load parameters dict
with open('fort.3', 'r') as f:
    txt = f.read()
f.close()
parameters = json.loads(txt)

# Define correctly all sleeper properties
for key in allSlpProps.keys():
    if key in parameters.keys():
        allSlpProps[key] *= parameters[key]

# If some parameters are not specifically requested to be optimized, attribute
# them a value st the material is transverse isotropic
if 'E_N' not in parameters.keys():
    allSlpProps['E_N'] = allSlpProps['E_T']
if 'G_LN' not in parameters.keys():
    allSlpProps['G_LN'] = allSlpProps['G_LT']
if 'NU_LN' not in parameters.keys():
    allSlpProps['NU_LN'] = allSlpProps['NU_LT']

print('allSlpProps')
print(allSlpProps)


# Define mesh & model, material, etc
mesh = LIRE_MAILLAGE(FORMAT='MED',
                     UNITE=2)

model = AFFE_MODELE(AFFE=_F(MODELISATION=('3D', ),
                            PHENOMENE='MECANIQUE',
                            TOUT='OUI'),
                    MAILLAGE=mesh)

# Before roration: XYZ=LTN ; after rotation (90Â° Y): XYZ=NTL.
elemprop = AFFE_CARA_ELEM(MASSIF=_F(ANGL_REP=(0.0, 90.0, 0.0),
                                    GROUP_MA=('sleepere', )),
                          MODELE=model)
    
mater = DEFI_MATERIAU(ELAS_ORTH=_F(E_L=max(allSlpProps['E_L'], 500),
                                   E_N=max(allSlpProps['E_N'], 500),
                                   E_T=max(allSlpProps['E_T'], 500),
                                   G_LN=max(allSlpProps['G_LN'], 200),
                                   G_LT=max(allSlpProps['G_LT'], 200),
                                   G_TN=max(allSlpProps['G_TN'], 200),
                                   NU_LN=allSlpProps['NU_LN'],
                                   NU_LT=allSlpProps['NU_LT'],
                                   NU_TN=allSlpProps['NU_TN'],
                                   RHO=allSlpProps['RHO']))

fieldmat = AFFE_MATERIAU(AFFE=_F(MATER=(mater, ),
                                TOUT='OUI'),
                         MODELE=model)

ASSEMBLAGE(CARA_ELEM=elemprop,
           CHAM_MATER=fieldmat,
           MATR_ASSE=(_F(MATRICE=CO('K'),
                         OPTION='RIGI_MECA'),
                      _F(MATRICE=CO('M'),
                         OPTION='MASS_MECA')),
           MODELE=model,
           NUME_DDL=CO('nddl'))

# Simulate
modes = CALC_MODES(CALC_FREQ=_F(NMAX_FREQ=nModes + 6, SEUIL_FREQ=20.0),
                MATR_MASS=M,
                MATR_RIGI=K,
                OPTION='PLUS_PETITE',
                SOLVEUR_MODAL=_F(METHODE='TRI_DIAG'), 
                VERI_MODE=_F(STOP_ERREUR='NON'))

# modes = NORM_MODE(reuse=modes, NORME='EUCL',)

IMPR_RESU(RESU=_F(RESULTAT=modes, NUME_MODE=list(range(7,nModes+7))),
          UNITE=80)

# Get displacements at requested nodes for all modes
tabModes = POST_RELEVE_T(ACTION=_F(INTITULE='Mode shapes',
                                   OPERATION='EXTRACTION',
                                   GROUP_NO=nodesForDispl,
                                   RESULTAT=modes,
                                   NOM_CHAM='DEPL',
                                   NUME_ORDRE=list(range(7,nModes+7)),
                                   NOM_CMP=('DX', 'DY', 'DZ')))

IMPR_TABLE(TABLE=tabModes, UNITE=82)

# Put all information in a dictionnary
dictAllModes = {}
for i in range(nModes):
    freq = tabModes['FREQ', i*len(nodesForDispl)+1]
    dictMode = {'freq' : freq}

    for j, node in enumerate(nodesForDispl):
        dplX = tabModes['DX', i*len(nodesForDispl)+1 + j]
        dplY = tabModes['DY', i*len(nodesForDispl)+1 + j]
        dplZ = tabModes['DZ', i*len(nodesForDispl)+1 + j]
        dictMode[node + '_X'] = dplX
        dictMode[node + '_Y'] = dplY
        dictMode[node + '_Z'] = dplZ

    dictAllModes['Mode ' + str(i+1)] = dictMode

# Norm modes (euclidian)
for key1 in dictAllModes.keys():

	norm = 0
	for key2 in dictAllModes[key1].keys():
		if key2 != 'freq':
			norm += dictAllModes[key1][key2]**2
	norm = norm**(1/2.0)

	if norm == 0:
		continue

	for key2 in dictAllModes[key1].keys():
		if key2 != 'freq':
			dictAllModes[key1][key2] /= norm

# Write dictionnary to JSON file
try:
    txt = json.dumps(dictAllModes, indent = 4, sort_keys=False)
    with open('fort.83', 'w') as f:
        f.write(txt)
    f.close()
except:
    print('Problem creating JSON file.')



FIN()