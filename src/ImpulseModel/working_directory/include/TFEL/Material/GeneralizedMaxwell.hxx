/*!
* \file   TFEL/Material/GeneralizedMaxwell.hxx
* \brief  this file implements the GeneralizedMaxwell Behaviour.
*         File generated by tfel version 3.2.1
* \author BenoÃ®t Bary
* \date   8 / 10 / 2014
 */

#ifndef LIB_TFELMATERIAL_GENERALIZEDMAXWELL_HXX
#define LIB_TFELMATERIAL_GENERALIZEDMAXWELL_HXX

#include<string>
#include<iostream>
#include<limits>
#include<stdexcept>
#include<algorithm>

#include"TFEL/Raise.hxx"
#include"TFEL/PhysicalConstants.hxx"
#include"TFEL/Config/TFELConfig.hxx"
#include"TFEL/Config/TFELTypes.hxx"
#include"TFEL/Metaprogramming/StaticAssert.hxx"
#include"TFEL/TypeTraits/IsFundamentalNumericType.hxx"
#include"TFEL/TypeTraits/IsReal.hxx"
#include"TFEL/Math/General/IEEE754.hxx"
#include"TFEL/Material/MaterialException.hxx"
#include"TFEL/Material/MechanicalBehaviour.hxx"
#include"TFEL/Material/MechanicalBehaviourTraits.hxx"
#include"TFEL/Material/OutOfBoundsPolicy.hxx"
#include"TFEL/Material/BoundsCheck.hxx"
#include"TFEL/Material/IsotropicPlasticity.hxx"
#include"TFEL/Material/Lame.hxx"
#include"TFEL/Material/Hosford1972YieldCriterion.hxx"
#include"TFEL/Material/GeneralizedMaxwellBehaviourData.hxx"
#include"TFEL/Material/GeneralizedMaxwellIntegrationData.hxx"

#include"MFront/Aster/Aster.hxx"

namespace tfel{

namespace material{

struct GeneralizedMaxwellParametersInitializer
{
static GeneralizedMaxwellParametersInitializer&
get();

double minimal_time_step_scaling_factor;
double maximal_time_step_scaling_factor;

void set(const char* const,const double);

/*!
 * \brief convert a string to double
 * \param[in] p : parameter
 * \param[in] v : value
 */
static double getDouble(const std::string&,const std::string&);
private :

GeneralizedMaxwellParametersInitializer();

GeneralizedMaxwellParametersInitializer(const GeneralizedMaxwellParametersInitializer&);

GeneralizedMaxwellParametersInitializer&
operator=(const GeneralizedMaxwellParametersInitializer&);
/*!
 * \brief read the parameters from the given file
 * \param[out] pi : parameters initializer
 * \param[in]  fn : file name
 */
static void readParameters(GeneralizedMaxwellParametersInitializer&,const char* const);
};

//! \brief forward declaration
template<ModellingHypothesis::Hypothesis,typename Type,bool use_qt>
class GeneralizedMaxwell;

//! \brief forward declaration
template<ModellingHypothesis::Hypothesis hypothesis,typename Type>
std::ostream&
 operator <<(std::ostream&,const GeneralizedMaxwell<hypothesis,Type,false>&);

/*!
* \class GeneralizedMaxwell
* \brief This class implements the GeneralizedMaxwell behaviour.
* \param hypothesis, modelling hypothesis.
* \param Type, numerical type.
* \author BenoÃ®t Bary
* \date   8 / 10 / 2014
* Generalised Maxwell law 
*/
template<ModellingHypothesis::Hypothesis hypothesis,typename Type>
class GeneralizedMaxwell<hypothesis,Type,false> final
: public MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis,Type,false>,
public GeneralizedMaxwellBehaviourData<hypothesis,Type,false>,
public GeneralizedMaxwellIntegrationData<hypothesis,Type,false>
{

static constexpr unsigned short N = ModellingHypothesisToSpaceDimension<hypothesis>::value;

TFEL_STATIC_ASSERT(N==1||N==2||N==3);
TFEL_STATIC_ASSERT(tfel::typetraits::IsFundamentalNumericType<Type>::cond);
TFEL_STATIC_ASSERT(tfel::typetraits::IsReal<Type>::cond);

friend std::ostream& operator<< <>(std::ostream&,const GeneralizedMaxwell&);

static constexpr unsigned short TVectorSize = N;
typedef tfel::math::StensorDimeToSize<N> StensorDimeToSize;
static constexpr unsigned short StensorSize = StensorDimeToSize::value;
typedef tfel::math::TensorDimeToSize<N> TensorDimeToSize;
static constexpr unsigned short TensorSize = TensorDimeToSize::value;

using ushort =  unsigned short;
using Types = tfel::config::Types<N,Type,false>;
using real                = typename Types::real;
using time                = typename Types::time;
using length              = typename Types::length;
using frequency           = typename Types::frequency;
using stress              = typename Types::stress;
using strain              = typename Types::strain;
using strainrate          = typename Types::strainrate;
using stressrate          = typename Types::stressrate;
using temperature         = typename Types::temperature;
using thermalexpansion    = typename Types::thermalexpansion;
using massdensity         = typename Types::massdensity;
using TVector             = typename Types::TVector;
using Stensor             = typename Types::Stensor;
using Stensor4            = typename Types::Stensor4;
using FrequencyStensor    = typename Types::FrequencyStensor;
using ForceTVector        = typename Types::ForceTVector;
using StressStensor       = typename Types::StressStensor;
using StressRateStensor   = typename Types::StressRateStensor;
using DisplacementTVector = typename Types::DisplacementTVector;
using StrainStensor       = typename Types::StrainStensor;
using StrainRateStensor   = typename Types::StrainRateStensor;
using StiffnessTensor     = typename Types::StiffnessTensor;
using Tensor              = typename Types::Tensor;
using FrequencyTensor     = typename Types::FrequencyTensor;
using StressTensor        = typename Types::StressTensor;
using ThermalExpansionCoefficientTensor = typename Types::ThermalExpansionCoefficientTensor;
using DeformationGradientTensor         = typename Types::DeformationGradientTensor;
using DeformationGradientRateTensor     = typename Types::DeformationGradientRateTensor;
using TangentOperator   = StiffnessTensor;
using PhysicalConstants = tfel::PhysicalConstants<real>;

public :

typedef GeneralizedMaxwellBehaviourData<hypothesis,Type,false> BehaviourData;
typedef GeneralizedMaxwellIntegrationData<hypothesis,Type,false> IntegrationData;
typedef typename MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis,Type,false>::SMFlag SMFlag;
typedef typename MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis,Type,false>::SMType SMType;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis,Type,false>::ELASTIC;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis,Type,false>::SECANTOPERATOR;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis,Type,false>::TANGENTOPERATOR;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis,Type,false>::CONSISTENTTANGENTOPERATOR;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis,Type,false>::NOSTIFFNESSREQUESTED;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis,Type,false>::STANDARDTANGENTOPERATOR;
using IntegrationResult = typename MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis,Type,false>::IntegrationResult;

using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis,Type,false>::SUCCESS;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis,Type,false>::FAILURE;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis,Type,false>::UNRELIABLE_RESULTS;

using StressFreeExpansionType = StrainStensor;

private :

#line 10 "GeneralizedMaxwell.mfront"
static constexpr int Nv = 4;


#line 24 "GeneralizedMaxwell.mfront"
tfel::math::tvector<4, StressStensor > dsej;

#line 27 "GeneralizedMaxwell.mfront"
stress l0;
#line 28 "GeneralizedMaxwell.mfront"
tfel::math::tvector<2, stress > d;

real minimal_time_step_scaling_factor;
real maximal_time_step_scaling_factor;

/*!
* \brief Update internal variables at end of integration
*/
void updateIntegrationVariables(){
}

/*!
* \brief Update internal variables at end of integration
*/
void updateStateVariables(){
this->sej += this->dsej;
}

/*!
* \brief Update auxiliary state variables at end of integration
*/
void updateAuxiliaryStateVariables()
{}

//! \brief Default constructor (disabled)
GeneralizedMaxwell() =delete ;
//! \brief Copy constructor (disabled)
GeneralizedMaxwell(const GeneralizedMaxwell&) = delete;
//! \brief Assignement operator (disabled)
GeneralizedMaxwell& operator = (const GeneralizedMaxwell&) = delete;

public:

/*!
* \brief Constructor
*/
GeneralizedMaxwell(const GeneralizedMaxwellBehaviourData<hypothesis,Type,false>& src1,
const GeneralizedMaxwellIntegrationData<hypothesis,Type,false>& src2)
: GeneralizedMaxwellBehaviourData<hypothesis,Type,false>(src1),
GeneralizedMaxwellIntegrationData<hypothesis,Type,false>(src2),
dsej(StressStensor(typename tfel::math::StensorTraits<StressStensor>::NumType(0)))
{
using namespace std;
using namespace tfel::math;
using std::vector;
this->minimal_time_step_scaling_factor = GeneralizedMaxwellParametersInitializer::get().minimal_time_step_scaling_factor;
this->maximal_time_step_scaling_factor = GeneralizedMaxwellParametersInitializer::get().maximal_time_step_scaling_factor;
}

/*
 * \brief constructor for the Aster interface
 * \param[in] ASTERdt_: time increment
 * \param[in] ASTERT_: temperature
 * \param[in] ASTERdT_: temperature increment
 * \param[in] ASTERmat: material properties
 * \param[in] ASTERint_vars: state variables
 * \param[in] ASTERext_vars: external state variables
 * \param[in] ASTERdext_vars: external state variables increments
 */
GeneralizedMaxwell(const Type* const ASTERdt_,
const Type* const ASTERT_,
const Type* const ASTERdT_,
const Type* const ASTERmat,
const Type* const ASTERint_vars,
const Type* const ASTERext_vars,
const Type* const ASTERdext_vars)
: GeneralizedMaxwellBehaviourData<hypothesis,Type,false>(ASTERT_,ASTERmat,
ASTERint_vars,ASTERext_vars),
GeneralizedMaxwellIntegrationData<hypothesis,Type,false>(ASTERdt_,ASTERdT_,ASTERdext_vars),
dsej(StressStensor(typename tfel::math::StensorTraits<StressStensor>::NumType(0)))
{
using namespace std;
using namespace tfel::math;
using std::vector;
this->minimal_time_step_scaling_factor = GeneralizedMaxwellParametersInitializer::get().minimal_time_step_scaling_factor;
this->maximal_time_step_scaling_factor = GeneralizedMaxwellParametersInitializer::get().maximal_time_step_scaling_factor;
}

/*!
 * \ brief initialize the behaviour with user code
 */
void initialize(){
using namespace std;
using namespace tfel::math;
using std::vector;
#line 31 "GeneralizedMaxwell.mfront"
this->l0 = this->k0-2*this->mu0/3;
}

/*!
* \brief set the policy for "out of bounds" conditions
*/
void
setOutOfBoundsPolicy(const OutOfBoundsPolicy policy_value){
this->policy = policy_value;
} // end of setOutOfBoundsPolicy

/*!
* \return the modelling hypothesis
*/
constexpr ModellingHypothesis::Hypothesis
getModellingHypothesis() const{
return hypothesis;
} // end of getModellingHypothesis

/*!
* \brief check bounds
*/
void checkBounds() const{
} // end of checkBounds

IntegrationResult
computePredictionOperator(const SMFlag smflag,const SMType smt) override{
using namespace std;
using namespace tfel::math;
using std::vector;
tfel::raise_if(smflag!=MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis,Type,false>::STANDARDTANGENTOPERATOR,
"invalid prediction operator flag");
#line 35 "GeneralizedMaxwell.mfront"
(this->Dt) = (this->l0)*Stensor4::IxI()+2*(this->mu0)*Stensor4::Id();return SUCCESS;
}

real getMinimalTimeStepScalingFactor() const override{
  return this->minimal_time_step_scaling_factor;
}

std::pair<bool,real>
computeAPrioriTimeStepScalingFactor(const real current_time_step_scaling_factor) const override{
const auto time_scaling_factor = this->computeAPrioriTimeStepScalingFactorII();
return {time_scaling_factor.first,
        std::min(std::min(std::max(time_scaling_factor.second,
                                   this->minimal_time_step_scaling_factor),
                          this->maximal_time_step_scaling_factor),
                  current_time_step_scaling_factor)};
}

/*!
* \brief Integrate behaviour  over the time step
*/
IntegrationResult
integrate(const SMFlag smflag, const SMType smt) override{
using namespace std;
using namespace tfel::math;
raise_if(smflag!=MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis,Type,false>::STANDARDTANGENTOPERATOR,
"invalid tangent operator flag");
bool computeTangentOperator_ = smt!=NOSTIFFNESSREQUESTED;
#line 39 "GeneralizedMaxwell.mfront"
const auto id = Stensor::Id();
#line 40 "GeneralizedMaxwell.mfront"
const auto e = this->eto+this->deto;
#line 41 "GeneralizedMaxwell.mfront"
this->d   = {this->l0,2*this->mu0};
#line 42 "GeneralizedMaxwell.mfront"
this->sig = this->d[0]*trace(e)*id+this->d[1]*e;
#line 43 "GeneralizedMaxwell.mfront"
if(this->dt>0){
#line 44 "GeneralizedMaxwell.mfront"
for(unsigned short i=0;i!=GeneralizedMaxwell::Nv;++i){
#line 45 "GeneralizedMaxwell.mfront"
const auto edt = exp(-this->dt/this->taui[i]);
#line 46 "GeneralizedMaxwell.mfront"
const auto c   =  this->taui[i]*(1-edt)/this->dt;
#line 47 "GeneralizedMaxwell.mfront"
const auto c1  =    this->ki[i]*c;
#line 48 "GeneralizedMaxwell.mfront"
const auto c2  = 2*this->mui[i]*c;
#line 49 "GeneralizedMaxwell.mfront"
const auto pj  = trace(this->sej[i])*edt/3+c1*trace(this->deto);
#line 50 "GeneralizedMaxwell.mfront"
this->d[0] += c1-c2/3;
#line 51 "GeneralizedMaxwell.mfront"
this->d[1] += c2;
#line 53 "GeneralizedMaxwell.mfront"
this->sej[i]  = deviator(this->sej[i])*edt+c2*deviator(this->deto)+pj*id;
#line 54 "GeneralizedMaxwell.mfront"
this->sig    += this->sej[i];
#line 55 "GeneralizedMaxwell.mfront"
}
#line 56 "GeneralizedMaxwell.mfront"
}
this->updateIntegrationVariables();
this->updateStateVariables();
this->updateAuxiliaryStateVariables();
if(computeTangentOperator_){
if(!this->computeConsistentTangentOperator(smt)){
return MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis,Type,false>::FAILURE;
}
}
return MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis,Type,false>::SUCCESS;
}

std::pair<bool,real>
computeAPosterioriTimeStepScalingFactor(const real current_time_step_scaling_factor) const override{
const auto time_scaling_factor = this->computeAPosterioriTimeStepScalingFactorII();
return {time_scaling_factor.first,
        std::min(std::min(std::max(time_scaling_factor.second,
                                   this->minimal_time_step_scaling_factor),
                          this->maximal_time_step_scaling_factor),
                 current_time_step_scaling_factor)};
}

/*!
* \brief Update the internal energy at end of the time step
* \param[in] Psi_s: internal energy at end of the time step
*/
void computeInternalEnergy(real& Psi_s) const
{
Psi_s=0;
}

/*!
* \brief Update the dissipated energy at end of the time step
* \param[in] Psi_d: dissipated energy at end of the time step
*/
void computeDissipatedEnergy(real& Psi_d) const
{
Psi_d=0;
}

bool computeConsistentTangentOperator(const SMType smt){
using namespace std;
using namespace tfel::math;
using std::vector;
#line 60 "GeneralizedMaxwell.mfront"
if(smt==CONSISTENTTANGENTOPERATOR){
#line 61 "GeneralizedMaxwell.mfront"
this->Dt = this->d[0]*Stensor4::IxI()+this->d[1]*Stensor4::Id();
#line 62 "GeneralizedMaxwell.mfront"
} else {
#line 63 "GeneralizedMaxwell.mfront"
this->Dt = this->l0*Stensor4::IxI()+2*this->mu0*Stensor4::Id();
#line 64 "GeneralizedMaxwell.mfront"
}
return true;
}

const TangentOperator& getTangentOperator() const{
return this->Dt;
}

void updateExternalStateVariables(){
this->eto  += this->deto;
this->T += this->dT;
}

//!
~GeneralizedMaxwell()
 override = default;

private:

std::pair<bool,real> computeAPrioriTimeStepScalingFactorII() const{
return {true,this->maximal_time_step_scaling_factor};
}

std::pair<bool,real> computeAPosterioriTimeStepScalingFactorII() const{
return {true,this->maximal_time_step_scaling_factor};
}

//! Tangent operator;
TangentOperator Dt;
//! policy for treating out of bounds conditions
OutOfBoundsPolicy policy = None;
}; // end of GeneralizedMaxwell class

template<ModellingHypothesis::Hypothesis hypothesis,typename Type>
std::ostream&
operator <<(std::ostream& os,const GeneralizedMaxwell<hypothesis,Type,false>& b)
{
using namespace std;
os << "eto : " << b.eto << '\n';
os << "deto : " << b.deto << '\n';
os << "sig : " << b.sig << '\n';
os << "dt : " << b.dt << endl;
os << "T : " << b.T << endl;
os << "dT : " << b.dT << endl;
os << "k0 : " << b.k0 << '\n';
os << "mu0 : " << b.mu0 << '\n';
os << "ki : " << b.ki << '\n';
os << "mui : " << b.mui << '\n';
os << "taui : " << b.taui << '\n';
os << "sej : " << b.sej << '\n';
os << "dsej : " << b.dsej << '\n';
os << "T : " << b.T << '\n';
os << "dT : " << b.dT << '\n';
os << "minimal_time_step_scaling_factor : " << b.minimal_time_step_scaling_factor << '\n';
os << "maximal_time_step_scaling_factor : " << b.maximal_time_step_scaling_factor << '\n';
return os;
}

/*!
* Partial specialisation for GeneralizedMaxwell.
*/
template<ModellingHypothesis::Hypothesis hypothesis,typename Type>
class MechanicalBehaviourTraits<GeneralizedMaxwell<hypothesis,Type,false> >
{
static constexpr unsigned short N = ModellingHypothesisToSpaceDimension<hypothesis>::value;
static constexpr unsigned short TVectorSize = N;
typedef tfel::math::StensorDimeToSize<N> StensorDimeToSize;
static constexpr unsigned short StensorSize = StensorDimeToSize::value;
typedef tfel::math::TensorDimeToSize<N> TensorDimeToSize;
static constexpr unsigned short TensorSize = TensorDimeToSize::value;
public:
static constexpr bool is_defined = true;
static constexpr bool use_quantities = false;
static constexpr bool hasStressFreeExpansion = false;
static constexpr bool handlesThermalExpansion = false;
static constexpr unsigned short dimension = N;
typedef Type NumType;
static constexpr unsigned short material_properties_nb = 14;
static constexpr unsigned short internal_variables_nb  = 4*StensorSize;
static constexpr unsigned short external_variables_nb  = 1;
static constexpr unsigned short external_variables_nb2 = 0;
static constexpr bool hasConsistentTangentOperator = true;
static constexpr bool isConsistentTangentOperatorSymmetric = false;
static constexpr bool hasPredictionOperator = true;
static constexpr bool hasAPrioriTimeStepScalingFactor = false;
static constexpr bool hasComputeInternalEnergy = false;
static constexpr bool hasComputeDissipatedEnergy = false;
/*!
* \return the name of the class.
*/
static const char* getName(){
return "GeneralizedMaxwell";
}

};

/*!
* Partial specialisation for GeneralizedMaxwell.
*/
template<typename Type>
class MechanicalBehaviourTraits<GeneralizedMaxwell<ModellingHypothesis::AXISYMMETRICALGENERALISEDPLANESTRESS,Type,false> >
{
public:
static constexpr bool is_defined = false;
static constexpr bool use_quantities = false;
static constexpr bool hasStressFreeExpansion = false;
static constexpr bool handlesThermalExpansion = false;
static constexpr unsigned short dimension = 0u;
typedef Type NumType;
static constexpr unsigned short material_properties_nb = 0;
static constexpr unsigned short internal_variables_nb  = 0;
static constexpr unsigned short external_variables_nb  = 0;
static constexpr unsigned short external_variables_nb2 = 0;
static constexpr bool hasConsistentTangentOperator = false;
static constexpr bool isConsistentTangentOperatorSymmetric = false;
static constexpr bool hasPredictionOperator = false;
static constexpr bool hasAPrioriTimeStepScalingFactor = false;
static constexpr bool hasComputeInternalEnergy = false;
static constexpr bool hasComputeDissipatedEnergy = false;
/*!
* \return the name of the class.
*/
static const char* getName(){
return "GeneralizedMaxwell";
}

};

/*!
* Partial specialisation for GeneralizedMaxwell.
*/
template<typename Type>
class MechanicalBehaviourTraits<GeneralizedMaxwell<ModellingHypothesis::PLANESTRESS,Type,false> >
{
public:
static constexpr bool is_defined = false;
static constexpr bool use_quantities = false;
static constexpr bool hasStressFreeExpansion = false;
static constexpr bool handlesThermalExpansion = false;
static constexpr unsigned short dimension = 0u;
typedef Type NumType;
static constexpr unsigned short material_properties_nb = 0;
static constexpr unsigned short internal_variables_nb  = 0;
static constexpr unsigned short external_variables_nb  = 0;
static constexpr unsigned short external_variables_nb2 = 0;
static constexpr bool hasConsistentTangentOperator = false;
static constexpr bool isConsistentTangentOperatorSymmetric = false;
static constexpr bool hasPredictionOperator = false;
static constexpr bool hasAPrioriTimeStepScalingFactor = false;
static constexpr bool hasComputeInternalEnergy = false;
static constexpr bool hasComputeDissipatedEnergy = false;
/*!
* \return the name of the class.
*/
static const char* getName(){
return "GeneralizedMaxwell";
}

};

} // end of namespace material

} // end of namespace tfel

#endif /* LIB_TFELMATERIAL_GENERALIZEDMAXWELL_HXX */
