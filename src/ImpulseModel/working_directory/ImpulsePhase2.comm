from Utilitai import partition

import time


# Propetries for Material 1
###########################

with open('fort.20') as fp: 
			Lines = fp.readlines()
			E_mx1 = float(Lines[0].split('\\')[0])

with open('fort.21') as fp: 
			Lines = fp.readlines()
			nu_mx1 = float(Lines[0].split('\\')[0])

with open('fort.22') as fp: 
			Lines = fp.readlines()
			rho_mx1 = float(Lines[0].split('\\')[0])

with open('fort.23') as fp: 
			Lines = fp.readlines()
			K0_mx1 = float(Lines[0].split('\\')[0])
			K1_mx1 = float(Lines[1].split('\\')[0])
			K2_mx1 = float(Lines[2].split('\\')[0])
			K3_mx1 = float(Lines[3].split('\\')[0])
			K4_mx1 = float(Lines[4].split('\\')[0])

with open('fort.24') as fp: 
			Lines = fp.readlines()
			G0_mx1 = float(Lines[0].split('\\')[0])
			G1_mx1 = float(Lines[1].split('\\')[0])
			G2_mx1 = float(Lines[2].split('\\')[0])
			G3_mx1 = float(Lines[3].split('\\')[0])
			G4_mx1 = float(Lines[4].split('\\')[0])

with open('fort.25') as fp: 
			Lines = fp.readlines()
			tau1_mx1 = float(Lines[0].split('\\')[0])
			tau2_mx1 = float(Lines[1].split('\\')[0])
			tau3_mx1 = float(Lines[2].split('\\')[0])
			tau4_mx1 = float(Lines[3].split('\\')[0])

# Propetries for Material 2
###########################

with open('fort.26') as fp: 
			Lines = fp.readlines()
			E_mx2 = float(Lines[0].split('\\')[0])

with open('fort.27') as fp: 
			Lines = fp.readlines()
			nu_mx2 = float(Lines[0].split('\\')[0])

with open('fort.28') as fp: 
			Lines = fp.readlines()
			rho_mx2 = float(Lines[0].split('\\')[0])

with open('fort.29') as fp: 
			Lines = fp.readlines()
			K0_mx2 = float(Lines[0].split('\\')[0])
			K1_mx2 = float(Lines[1].split('\\')[0])
			K2_mx2 = float(Lines[2].split('\\')[0])
			K3_mx2 = float(Lines[3].split('\\')[0])
			K4_mx2 = float(Lines[4].split('\\')[0])

with open('fort.30') as fp: 
			Lines = fp.readlines()
			G0_mx2 = float(Lines[0].split('\\')[0])
			G1_mx2 = float(Lines[1].split('\\')[0])
			G2_mx2 = float(Lines[2].split('\\')[0])
			G3_mx2 = float(Lines[3].split('\\')[0])
			G4_mx2 = float(Lines[4].split('\\')[0])

with open('fort.31') as fp: 
			Lines = fp.readlines()
			tau1_mx2 = float(Lines[0].split('\\')[0])
			tau2_mx2 = float(Lines[1].split('\\')[0])
			tau3_mx2 = float(Lines[2].split('\\')[0])
			tau4_mx2 = float(Lines[3].split('\\')[0])

# Propetries for Sleepers
###########################

with open('fort.32') as fp: 
			Lines = fp.readlines()
			slp_E = float(Lines[0].split('\\')[0])

with open('fort.33') as fp: 
			Lines = fp.readlines()
			slp_Nu = float(Lines[0].split('\\')[0])

with open('fort.34') as fp: 
			Lines = fp.readlines()
			slp_Rho = float(Lines[0].split('\\')[0])

with open('fort.35') as fp: 
			Lines = fp.readlines()
			slp_Am = float(Lines[0].split('\\')[0])

# Propetries for Rails
###########################

with open('fort.36') as fp: 
			Lines = fp.readlines()
			rail_E = float(Lines[0].split('\\')[0])

with open('fort.37') as fp: 
			Lines = fp.readlines()
			rail_Nu = float(Lines[0].split('\\')[0])

with open('fort.38') as fp: 
			Lines = fp.readlines()
			rail_Rho = float(Lines[0].split('\\')[0])

with open('fort.39') as fp: 
			Lines = fp.readlines()
			rail_Am = float(Lines[0].split('\\')[0])

# Propetries for Ballast
###########################

with open('fort.40') as fp: 
			Lines = fp.readlines()
			bal_E = float(Lines[0].split('\\')[0])

with open('fort.41') as fp: 
			Lines = fp.readlines()
			bal_Nu = float(Lines[0].split('\\')[0])

with open('fort.42') as fp: 
			Lines = fp.readlines()
			bal_Rho = float(Lines[0].split('\\')[0])

with open('fort.43') as fp: 
			Lines = fp.readlines()
			bal_Am = float(Lines[0].split('\\')[0])



POURSUITE(PAR_LOT='NON')


# --------- INIT OUTPUT FILES ------------------



fileRES=open('fort.40','w')


fileHeader = 'TIME\t'+'Clamp rail side\t'+'Clamp sleeper side\t'+'Bottom sleeper\t'
fileHeader+='\n'

fileHeader += '[s]\t'+'[mm]\t'+'[mm]\t'+'[mm]\t'
fileHeader+='\n'



fileRES.write(fileHeader)
fileRES.close()



# ---------  PARAMETERS   -------------------------


groupsPadHard=('hard___0','hard___1','hard___2','hard___3','hard___4','hard',)
groupsPadSoft=('soft___0','soft___1','soft___2','soft___3','soft___4','soft',)
groupsAllPad=('hard___0','hard___1','hard___2','hard___3','hard___4','hard','soft___0','soft___1','soft___2','soft___3','soft___4','soft',)


# --------- Materials --------------

CREA_LIB_MFRONT(UNITE_MFRONT=10,
                UNITE_LIBRAIRIE=11, )


padhard = DEFI_MATERIAU(ELAS=_F(E=E_mx1, NU=nu_mx1, RHO=rho_mx1),
                        MFRONT=_F( LISTE_COEF = (K0_mx1,G0_mx1,
                                                 K1_mx1,K2_mx1,K3_mx1,K4_mx1,
                                                 G1_mx1,G2_mx1,G3_mx1,G4_mx1,
                                                 tau1_mx1,tau2_mx1,tau3_mx1,tau4_mx1,)),
                        )


padsoft = DEFI_MATERIAU(ELAS=_F(E=E_mx2, NU=nu_mx2, RHO=rho_mx2),
                        MFRONT=_F( LISTE_COEF = (K0_mx2,G0_mx2,
                                                 K1_mx2,K2_mx2,K3_mx2,K4_mx2,
                                                 G1_mx2,G2_mx2,G3_mx2,G4_mx2,
                                                 tau1_mx2,tau2_mx2,tau3_mx2,tau4_mx2,)),
                        )


slpMx = DEFI_MATERIAU(ELAS=_F(AMOR_HYST=slp_Am,
                                E=slp_E,
                                NU=slp_Nu,
                                RHO=slp_Rho))


balMx = DEFI_MATERIAU(ELAS=_F(AMOR_HYST=bal_Am,
                             E=bal_E,
                             NU=bal_Nu,
                             RHO=bal_Rho))


railMx = DEFI_MATERIAU(ELAS=_F(AMOR_HYST=rail_Am,
                              E=rail_E,
                              NU=rail_Nu,
                              RHO=rail_Rho))


# ---------  Loads  --------------

BCload = AFFE_CHAR_MECA(FORCE_NODALE=_F(FY=-107900.0,
                                        GROUP_NO=('nodeF', 'nodeF__0', )),
                        MODELE=model)

fixedBC = (BCfix, tie1, tie2, tie3, tie4, tie5, tie6, tie7, tie8, tie9, tie10, tie11, tie12, tie13, tie14, tie15, )


# ---------  Solution  --------------


fieldmat = AFFE_MATERIAU(AFFE=(_F(GROUP_MA=('ballaste', ),
                                  MATER=(balMx, )),
                               _F(GROUP_MA=('sleepere', 'sleeper0', 'sleeper1'),
                                  MATER=(slpMx, )),
                               _F(GROUP_MA=groupsPadHard,
                                  MATER=(padhard, )),
                               _F(GROUP_MA=groupsPadSoft,
                                  MATER=(padsoft, )),
                               _F(GROUP_MA=('raile', 'raile__0'),
                                  MATER=(railMx, ))),
                         MAILLAGE=mesh,
                         MODELE=model)



# M-shape load profile -> 71 time steps -> 101 steps to reach 0.1 s

tsteps = 101

Mimp=DEFI_FONCTION(NOM_PARA='INST',
                   VALE=(0,0,
                         0.001,0.00615583,
                         0.002,0.024471742,
                         0.003,0.054496738,
                         0.004,0.095491503,
                         0.005,0.146446609,
                         0.006,0.206107374,
                         0.007,0.27300475,
                         0.008,0.345491503,
                         0.009,0.421782767,
                         0.01,0.5,
                         0.011,0.578217233,
                         0.012,0.654508497,
                         0.013,0.72699525,
                         0.014,0.793892626,
                         0.015,0.853553391,
                         0.016,0.904508497,
                         0.017,0.945503262,
                         0.018,0.975528258,
                         0.019,0.99384417,
                         0.02,1,
                         0.021,0.99384417,
                         0.022,0.975528258,
                         0.023,0.945503262,
                         0.024,0.904508497,
                         0.025,0.853553391,
                         0.026,0.793892626,
                         0.027,0.72699525,
                         0.028,0.654508497,
                         0.029,0.578217233,
                         0.03,0.5,
                         0.031,0.427938597,
                         0.032,0.369963245,
                         0.033,0.327501488,
                         0.034,0.301598877,
                         0.035,0.292893219,
                         0.036,0.301598877,
                         0.037,0.327501488,
                         0.038,0.369963245,
                         0.039,0.427938597,
                         0.04,0.5,
                         0.041,0.578217233,
                         0.042,0.654508497,
                         0.043,0.72699525,
                         0.044,0.793892626,
                         0.045,0.853553391,
                         0.046,0.904508497,
                         0.047,0.945503262,
                         0.048,0.975528258,
                         0.049,0.99384417,
                         0.05,1,
                         0.051,0.99384417,
                         0.052,0.975528258,
                         0.053,0.945503262,
                         0.054,0.904508497,
                         0.055,0.853553391,
                         0.056,0.793892626,
                         0.057,0.72699525,
                         0.058,0.654508497,
                         0.059,0.578217233,
                         0.06,0.5,
                         0.061,0.421782767,
                         0.062,0.345491503,
                         0.063,0.27300475,
                         0.064,0.206107374,
                         0.065,0.146446609,
                         0.066,0.095491503,
                         0.067,0.054496738,
                         0.068,0.024471742,
                         0.069,0.00615583,
                         0.07,0,
                          ),
                   INFO=2,TITRE='Mimp',
                   PROL_DROITE='CONSTANT',);

time = DEFI_LIST_REEL(DEBUT=0.0,
                      INFO=2,
                      INTERVALLE=_F(JUSQU_A=0.1,
                                    NOMBRE=tsteps), #NOMBRE=3),
                      TITRE='time')

deflist = DEFI_LIST_INST(DEFI_LIST=_F(LIST_INST=time,
                                      PAS_MINI=1e-07,
                                      PAS_MAXI=1e-03), #PAS_MAXI=0.1),
                         INFO=1,
                         METHODE='AUTO')

resImp=STAT_NON_LINE(MODELE=model,
                     CHAM_MATER=fieldmat,
                     CARA_ELEM=elemprop,
                     EXCIT=(_F(CHARGE=BCfix,),
                            _F(CHARGE=tie1,),
                            _F(CHARGE=tie2,),
                            _F(CHARGE=tie3,),
                            _F(CHARGE=tie4,),
                            _F(CHARGE=tie5,),
                            _F(CHARGE=tie6,),
                            _F(CHARGE=tie7,),
                            _F(CHARGE=tie8,),
                            _F(CHARGE=tie9,),
                            _F(CHARGE=tie10,),
                            _F(CHARGE=tie11,),
                            _F(CHARGE=tie12,),
                            _F(CHARGE=tie13,),
                            _F(CHARGE=tie14,),
                            _F(CHARGE=tie15,),
                            _F(CHARGE=BCload,FONC_MULT=Mimp,),),
                     COMPORTEMENT=_F(RELATION='MFRONT',
                                     GROUP_MA=groupsAllPad,
                                     UNITE_LIBRAIRIE=11,
                                     NOM_ROUTINE='astergeneralizedmaxwell',),
                     INCREMENT=_F(LIST_INST= deflist,),
                     NEWTON=_F(REAC_INCR=1,
                               MATRICE='TANGENTE',
                               REAC_ITER=1,),
                     CONVERGENCE=_F(ITER_GLOB_MAXI=200,),
                     ARCHIVAGE=_F(PAS_ARCH=1,),);


resImp=CALC_CHAMP(reuse =resImp,
                  MODELE=model,
                  TOUT ='OUI',
                  CHAM_MATER=fieldmat,
                  CONTRAINTE =('SIGM_ELGA','SIGM_ELNO','SIGM_NOEU',),
                  RESULTAT=resImp,);


t2 = POST_RELEVE_T( ACTION = _F (RESULTAT=resImp,
				                 NOM_CHAM='SIGM_NOEU',
                                 INTITULE= 'StressInBal',
                                 GROUP_NO='balLoad',
                                 INVARIANT = 'OUI',
                                 OPERATION= 'EXTRACTION'    )  )

IMPR_TABLE(TABLE=t2,
           UNITE=8)

t3 = POST_RELEVE_T( ACTION = _F (RESULTAT=resImp,
				                 NOM_CHAM='SIGM_NOEU',
                                 INTITULE= 'StressInBal',
                                 GROUP_NO='balLoad',
                                 NOM_CMP= ('SIXX','SIYY','SIZZ','SIXY'),
                                 OPERATION= 'EXTRACTION'    )  )

IMPR_TABLE(TABLE=t3,
           UNITE=9)

dispR = RECU_FONCTION(GROUP_NO=('rntsl2_0', ),
                      NOM_CHAM='DEPL',
                      NOM_CMP='DY',
                      RESULTAT=resImp)

dispS = RECU_FONCTION(GROUP_NO=('sntrle_0', ),
                      NOM_CHAM='DEPL',
                      NOM_CMP='DY',
                      RESULTAT=resImp)

dispBotS = RECU_FONCTION(GROUP_NO=('botSlp_0', ),
                         NOM_CHAM='DEPL',
                         NOM_CMP='DY',
                         RESULTAT=resImp)


Resdatalines = []
time = [x * 0.001 for x in range(0, 101)]
for step in time:
    val1 = dispR(step)
    val2 = dispS(step)
    val3 = dispBotS(step)
    line = str(step) + "\t" + str(val1) + "\t" + str(val2) + "\t" + str(val3) + "\t" + "\n"
    Resdatalines.append(line)


#  end extraction loop: write data line to file

fileRES=open('fort.40','a+')
fileContent='\t'.join(Resdatalines) + '\n'
fileRES.write(fileContent)
fileRES.close()

    



# ------ END OF SOLUTION LOOP --------



IMPR_RESU(INFO=2, FORMAT='MED',
          RESU=_F(PARTIE='REEL',
                  NOM_CHAM=('DEPL','VITE'),
                  NOM_CHAM_MED = ('displacement', 'velocity'),
                  RESULTAT=resImp,),
                  # FREQ=frequency),
          UNITE=81)



FIN()


