from Utilitai import partition
import json
import numpy as np

DEBUT(LANG='EN', PAR_LOT='NON')

###################################
# Import JSON parameters
###################################
with open('fort.3', 'r') as f:
    txt = f.read()
f.close()
parameters = json.loads(txt)

USP_on = parameters['USP_on']
slpSpacing = parameters['slpSpacing']
stiff_X = parameters['clampStiffX']*1000/2
stiff_Y = parameters['clampStiffY']*1000/2
stiff_Z = parameters['clampStiffZ']*1000/2
damp_X = parameters['clampDampX']/2
damp_Y = parameters['clampDampY']/2
damp_Z = parameters['clampDampZ']/2

###################################
# Open the Unit-Cell mesh
###################################

mesh = LIRE_MAILLAGE(FORMAT='MED',
                     UNITE=2)


###################################
# Affectation of the elements type
###################################

model = AFFE_MODELE(AFFE=(_F(MODELISATION=('3D', ),
                             PHENOMENE='MECANIQUE',
                             TOUT='OUI'
                            ),
                          _F(MODELISATION=('DIS_T', ),
                             PHENOMENE='MECANIQUE',
                             GROUP_MA=('edgeaa','edgeab', 'edgeba', 'edgebb', 'edgeca', 'edgecb', 'edgeda', 'edgedb', 'edgeea', 'edgeeb', 'edgefa', 'edgefb', 'edgega', 'edgegb', 'edgeha', 'edgehb', 'edgeia', 'edgeib', 'edgeja', 'edgejb', 'edgeka', 'edgekb', 'edgela', 'edgelb', )
                            ),),
                    INFO=1,
                    DISTRIBUTION=_F(METHODE='SOUS_DOMAINE'), # PARTITIONNEUR='SCOTCH'),
                    MAILLAGE=mesh)

###################################
# Discret elements properties
###################################

elemprop = AFFE_CARA_ELEM(DISCRET=(_F(CARA='K_T_D_L',
                                      GROUP_MA=('edgeaa','edgeab', 'edgeba', 'edgebb', 'edgeca', 'edgecb', 'edgeda', 'edgedb', 'edgeea', 'edgeeb', 'edgefa', 'edgefb', 'edgega', 'edgegb', 'edgeha', 'edgehb', 'edgeia', 'edgeib', 'edgeja', 'edgejb', 'edgeka', 'edgekb', 'edgela', 'edgelb', ),
                                      VALE=(stiff_X, stiff_Y, stiff_Z)    # Stiffness of the clamps
                                     ),
                                   _F(CARA='A_T_D_L',
                                      GROUP_MA=('edgeaa','edgeab', 'edgeba', 'edgebb', 'edgeca', 'edgecb', 'edgeda', 'edgedb', 'edgeea', 'edgeeb', 'edgefa', 'edgefb', 'edgega', 'edgegb', 'edgeha', 'edgehb', 'edgeia', 'edgeib', 'edgeja', 'edgejb', 'edgeka', 'edgekb', 'edgela', 'edgelb',),
                                      VALE=(damp_X, damp_Y, damp_Z)    # Damping of the clamps
                                     ),
                                  ),
                          MASSIF=_F(ANGL_REP=(0.0, 90.0, 0.0), GROUP_MA=('sleepere', 'sleeper0', 'sleeper1', )),
                          MODELE=model)


###################################
# Ballast fixed to ground
###################################

BCfix = AFFE_CHAR_MECA(DDL_IMPO=_F(DX=0.0,
                                   DY=0.0,
                                   DZ=0.0,
                                   GROUP_NO=('bnbot', )),
                       MODELE=model)


if USP_on:
   ###################################
   # USP glued to the Ballast
   ###################################
   # USP 1
   tie1 = AFFE_CHAR_MECA(LIAISON_MAIL=(_F(GROUP_NO_ESCL=('untb', ),
                                          GROUP_MA_MAIT=('bets1', ),
                                          TYPE_RACCORD='MASSIF')),
                        MODELE=model)

   # USP 2
   tie2 = AFFE_CHAR_MECA(LIAISON_MAIL=(_F(GROUP_NO_ESCL=('untb___0', ),
                                          GROUP_MA_MAIT=('bets2', ),
                                          TYPE_RACCORD='MASSIF')),
                        MODELE=model)

   # USP 3
   tie3 = AFFE_CHAR_MECA(LIAISON_MAIL=(_F(GROUP_NO_ESCL=('untb___1', ),
                                          GROUP_MA_MAIT=('bets3', ),
                                          TYPE_RACCORD='MASSIF')),
                        MODELE=model)

   ###################################
   # Sleeper glued to the USP
   ###################################
   # Sleeper 1
   tieUSP1 = AFFE_CHAR_MECA(LIAISON_MAIL=(_F(GROUP_NO_ESCL=('sntb', ),
                                          GROUP_MA_MAIT=('USPe', ),
                                          TYPE_RACCORD='MASSIF')),
                        MODELE=model)

   # Sleeper 2
   tieUSP2 = AFFE_CHAR_MECA(LIAISON_MAIL=(_F(GROUP_NO_ESCL=('sntb___0', ),
                                          GROUP_MA_MAIT=('USPe___0', ),
                                          TYPE_RACCORD='MASSIF')),
                        MODELE=model)

   # Sleeper 3
   tieUSP3 = AFFE_CHAR_MECA(LIAISON_MAIL=(_F(GROUP_NO_ESCL=('sntb___1', ),
                                          GROUP_MA_MAIT=('USPe___1', ),
                                          TYPE_RACCORD='MASSIF')),
                        MODELE=model)
	
else:
   ###################################
   # Sleeper glued to the ballast
   ###################################
   # Sleeper 1
   tie1 = AFFE_CHAR_MECA(LIAISON_MAIL=(_F(GROUP_NO_ESCL=('sntb', ),
                                          GROUP_MA_MAIT=('bets1', ),
                                          TYPE_RACCORD='MASSIF')),
                        MODELE=model)

   # Sleeper 2
   tie2 = AFFE_CHAR_MECA(LIAISON_MAIL=(_F(GROUP_NO_ESCL=('sntb___0', ),
                                          GROUP_MA_MAIT=('bets2', ),
                                          TYPE_RACCORD='MASSIF')),
                        MODELE=model)

   # Sleeper 3
   tie3 = AFFE_CHAR_MECA(LIAISON_MAIL=(_F(GROUP_NO_ESCL=('sntb___1', ),
                                          GROUP_MA_MAIT=('bets3', ),
                                          TYPE_RACCORD='MASSIF')),
                        MODELE=model)

###################################
# Pads glued to the Sleepers
###################################

# Pad 1
tie4 = AFFE_CHAR_MECA(LIAISON_MAIL=(_F(GROUP_NO_ESCL=('pnts', ),
                                       GROUP_MA_MAIT=('setpr', ),
                                       TYPE_RACCORD='MASSIF')),
                      MODELE=model)

# Pad 2                          
tie5 = AFFE_CHAR_MECA(LIAISON_MAIL=(_F(GROUP_NO_ESCL=('pnts___0',),
                                       GROUP_MA_MAIT=('setpl', ),
                                       TYPE_RACCORD='MASSIF')),
                      MODELE=model)

# Pad 3
tie6 = AFFE_CHAR_MECA(LIAISON_MAIL=(_F(GROUP_NO_ESCL=('pnts___1', ),
                                       GROUP_MA_MAIT=('setpr__0', ),
                                       TYPE_RACCORD='MASSIF')),
                      MODELE=model)

# Pad 4
tie7 = AFFE_CHAR_MECA(LIAISON_MAIL=(_F(GROUP_NO_ESCL=('pnts___2', ),
                                       GROUP_MA_MAIT=('setpl__0', ),
                                       TYPE_RACCORD='MASSIF')),
                      MODELE=model)


# Pad 5
tie8 = AFFE_CHAR_MECA(LIAISON_MAIL=(_F(GROUP_NO_ESCL=('pnts___3', ),
                                       GROUP_MA_MAIT=('setpr__1', ),
                                       TYPE_RACCORD='MASSIF')),
                      MODELE=model)

# Pad 6                        
tie9 = AFFE_CHAR_MECA(LIAISON_MAIL=(_F(GROUP_NO_ESCL=('pnts___4',),
                                       GROUP_MA_MAIT=('setpl__1', ),
                                       TYPE_RACCORD='MASSIF')),
                      MODELE=model)

###################################
# Rails glued to the Pads
###################################

# Pad 1
tie10 = AFFE_CHAR_MECA(LIAISON_MAIL=( _F(GROUP_NO_ESCL=('pntr', ),
                                         GROUP_MA_MAIT=('retp', ),
                                         TYPE_RACCORD='MASSIF',
                                         DISTANCE_MAX=1.0)),
                       MODELE=model)

# Pad 2
tie11 = AFFE_CHAR_MECA(LIAISON_MAIL=( _F(GROUP_NO_ESCL=( 'pntr___0',),
                                         GROUP_MA_MAIT=('retp__0', ),
                                         TYPE_RACCORD='MASSIF',
                                         DISTANCE_MAX=1.0)),
                       MODELE=model)

# Pad 3                          
tie12 = AFFE_CHAR_MECA(LIAISON_MAIL=( _F(GROUP_NO_ESCL=('pntr___1',),
                                         GROUP_MA_MAIT=('retp', ),
                                         TYPE_RACCORD='MASSIF',
                                         DISTANCE_MAX=1.0)),
                       MODELE=model)

# Pad 4
tie13 = AFFE_CHAR_MECA(LIAISON_MAIL=(_F(GROUP_NO_ESCL=('pntr___2', ),
                                        GROUP_MA_MAIT=('retp__0', ),
                                        TYPE_RACCORD='MASSIF',
                                         DISTANCE_MAX=1.0)),
                       MODELE=model)

# Pad 5
tie14 = AFFE_CHAR_MECA(LIAISON_MAIL=(_F(GROUP_NO_ESCL=('pntr___3', ),
                                        GROUP_MA_MAIT=('retp', ),
                                        TYPE_RACCORD='MASSIF',
                                         DISTANCE_MAX=1.0)),
                       MODELE=model)

# Pad 6                       
tie15 = AFFE_CHAR_MECA(LIAISON_MAIL=(_F(GROUP_NO_ESCL=( 'pntr___4',),
                                        GROUP_MA_MAIT=('retp__0', ),
                                        TYPE_RACCORD='MASSIF',
                                         DISTANCE_MAX=1.0)),
                       MODELE=model)

###########################
# End of Phase 1, Start of Phase 2 in the previous model
###########################

# Properties for Material 1
###########################

with open('fort.20') as fp: 
			Lines = fp.readlines()
			E_mx1 = float(Lines[0].split('\\')[0])

with open('fort.21') as fp: 
			Lines = fp.readlines()
			nu_mx1 = float(Lines[0].split('\\')[0])

with open('fort.22') as fp: 
			Lines = fp.readlines()
			rho_mx1 = float(Lines[0].split('\\')[0])

with open('fort.23') as fp: 
			Lines = fp.readlines()
			K0_mx1 = float(Lines[0].split('\\')[0])
			K1_mx1 = float(Lines[1].split('\\')[0])
			K2_mx1 = float(Lines[2].split('\\')[0])
			K3_mx1 = float(Lines[3].split('\\')[0])
			K4_mx1 = float(Lines[4].split('\\')[0])

with open('fort.24') as fp: 
			Lines = fp.readlines()
			G0_mx1 = float(Lines[0].split('\\')[0])
			G1_mx1 = float(Lines[1].split('\\')[0])
			G2_mx1 = float(Lines[2].split('\\')[0])
			G3_mx1 = float(Lines[3].split('\\')[0])
			G4_mx1 = float(Lines[4].split('\\')[0])

with open('fort.25') as fp: 
			Lines = fp.readlines()
			tau1_mx1 = float(Lines[0].split('\\')[0])
			tau2_mx1 = float(Lines[1].split('\\')[0])
			tau3_mx1 = float(Lines[2].split('\\')[0])
			tau4_mx1 = float(Lines[3].split('\\')[0])

# Properties for Material 2
###########################

with open('fort.26') as fp: 
			Lines = fp.readlines()
			E_mx2 = float(Lines[0].split('\\')[0])

with open('fort.27') as fp: 
			Lines = fp.readlines()
			nu_mx2 = float(Lines[0].split('\\')[0])

with open('fort.28') as fp: 
			Lines = fp.readlines()
			rho_mx2 = float(Lines[0].split('\\')[0])

with open('fort.29') as fp: 
			Lines = fp.readlines()
			K0_mx2 = float(Lines[0].split('\\')[0])
			K1_mx2 = float(Lines[1].split('\\')[0])
			K2_mx2 = float(Lines[2].split('\\')[0])
			K3_mx2 = float(Lines[3].split('\\')[0])
			K4_mx2 = float(Lines[4].split('\\')[0])

with open('fort.30') as fp: 
			Lines = fp.readlines()
			G0_mx2 = float(Lines[0].split('\\')[0])
			G1_mx2 = float(Lines[1].split('\\')[0])
			G2_mx2 = float(Lines[2].split('\\')[0])
			G3_mx2 = float(Lines[3].split('\\')[0])
			G4_mx2 = float(Lines[4].split('\\')[0])

with open('fort.31') as fp: 
			Lines = fp.readlines()
			tau1_mx2 = float(Lines[0].split('\\')[0])
			tau2_mx2 = float(Lines[1].split('\\')[0])
			tau3_mx2 = float(Lines[2].split('\\')[0])
			tau4_mx2 = float(Lines[3].split('\\')[0])

# Properties for Sleepers
###########################

with open('fort.32') as fp: 
			Lines = fp.readlines()
			slp_E1 = float(Lines[0].split('\r')[0])
			slp_E2 = float(Lines[1].split('\r')[0])
			slp_E3 = float(Lines[2].split('\r')[0])
			print('slp E1 ' + str(slp_E1))
			print('slp E2 ' + str(slp_E2))
			print('slp E3 ' + str(slp_E3))

with open('fort.33') as fp: 
			Lines = fp.readlines()
			slp_Nu = float(Lines[0].split('\\')[0])

with open('fort.34') as fp: 
			Lines = fp.readlines()
			slp_Rho = float(Lines[0].split('\\')[0])

with open('fort.35') as fp: 
			Lines = fp.readlines()
			slp_Am = float(Lines[0].split('\\')[0])

# Properties for Rails
###########################

with open('fort.36') as fp: 
			Lines = fp.readlines()
			rail_E = float(Lines[0].split('\\')[0])

with open('fort.37') as fp: 
			Lines = fp.readlines()
			rail_Nu = float(Lines[0].split('\\')[0])

with open('fort.38') as fp: 
			Lines = fp.readlines()
			rail_Rho = float(Lines[0].split('\\')[0])

with open('fort.39') as fp: 
			Lines = fp.readlines()
			rail_Am = float(Lines[0].split('\\')[0])

# Properties for Ballast
###########################

with open('fort.40') as fp: 
			Lines = fp.readlines()
			bal_E = float(Lines[0].split('\\')[0])

with open('fort.41') as fp: 
			Lines = fp.readlines()
			bal_Nu = float(Lines[0].split('\\')[0])

with open('fort.42') as fp: 
			Lines = fp.readlines()
			bal_Rho = float(Lines[0].split('\\')[0])

with open('fort.43') as fp: 
			Lines = fp.readlines()
			bal_Am = float(Lines[0].split('\\')[0])

# Properties for USP
###########################
if USP_on:
   with open('fort.44') as fp: 
            Lines = fp.readlines()
            USP_E = float(Lines[0].split('\\')[0])

   with open('fort.45') as fp: 
            Lines = fp.readlines()
            USP_Nu = float(Lines[0].split('\\')[0])

   with open('fort.46') as fp: 
            Lines = fp.readlines()
            USP_Rho = float(Lines[0].split('\\')[0])

   with open('fort.47') as fp: 
            Lines = fp.readlines()
            USP_Am = float(Lines[0].split('\\')[0])



# --------- INIT OUTPUT FILES ------------------



fileRES=open('fort.82','w')


fileHeader = 'TIME\t' + 'Rail top\t' + 'Clamp rail side\t' + 'Clamp sleeper side\t' + 'Bottom sleeper\t'
fileHeader+='\n'

fileHeader += '[s]\t'+'[mm]\t'+'[mm]\t'+'[mm]\t'
fileHeader+='\n'



fileRES.write(fileHeader)
fileRES.close()



# ---------  PARAMETERS   -------------------------


groupsPadHard=('hard___0','hard___1','hard___2','hard___3','hard___4','hard',)
groupsPadSoft=('soft___0','soft___1','soft___2','soft___3','soft___4','soft',)
groupsAllPad=('hard___0','hard___1','hard___2','hard___3','hard___4','hard','soft___0','soft___1','soft___2','soft___3','soft___4','soft',)


# --------- Materials --------------

CREA_LIB_MFRONT(UNITE_MFRONT=10,
                UNITE_LIBRAIRIE=11, )


padhard = DEFI_MATERIAU(ELAS=_F(E=E_mx1, NU=nu_mx1, RHO=rho_mx1),
                        MFRONT=_F( LISTE_COEF = (K0_mx1,G0_mx1,
                                                 K1_mx1,K2_mx1,K3_mx1,K4_mx1,
                                                 G1_mx1,G2_mx1,G3_mx1,G4_mx1,
                                                 tau1_mx1,tau2_mx1,tau3_mx1,tau4_mx1,)),
                        )


padsoft = DEFI_MATERIAU(ELAS=_F(E=E_mx2, NU=nu_mx2, RHO=rho_mx2),
                        MFRONT=_F( LISTE_COEF = (K0_mx2,G0_mx2,
                                                 K1_mx2,K2_mx2,K3_mx2,K4_mx2,
                                                 G1_mx2,G2_mx2,G3_mx2,G4_mx2,
                                                 tau1_mx2,tau2_mx2,tau3_mx2,tau4_mx2,)),
                        )

# Before roration: XYZ=LTN ; after rotation (90° Y): XYZ=NTL. See R4.01.02
slpMx = DEFI_MATERIAU(ELAS_ORTH=_F(E_L=slp_E1,
                                     E_N=slp_E3,
                                     E_T=slp_E2,
                                     G_LN=slp_E1/2/(1+slp_Nu),
                                     G_LT=slp_E1/2/(1+slp_Nu),
                                     G_TN=slp_E3/2/(1+slp_Nu),
                                     NU_LN=slp_Nu,
                                     NU_LT=slp_Nu,
                                     NU_TN=slp_Nu,
                                     AMOR_HYST=slp_Am,
                                     RHO=slp_Rho))


balMx = DEFI_MATERIAU(ELAS=_F(AMOR_HYST=0.5,
                             E=bal_E,
                             NU=bal_Nu,
                             RHO=bal_Rho))


railMx = DEFI_MATERIAU(ELAS=_F(AMOR_HYST=rail_Am,
                              E=rail_E,
                              NU=rail_Nu,
                              RHO=rail_Rho))

if USP_on:
   USPMx = DEFI_MATERIAU(ELAS=_F(AMOR_HYST=USP_Am,
                                 E=USP_E,
                                 NU=USP_Nu,
                                 RHO=USP_Rho))


# ---------  Loads  --------------

BCload = AFFE_CHAR_MECA(FORCE_NODALE=_F(FY=-107900.0,
                                        GROUP_NO=('nodeF', 'nodeF__0', )),
                        MODELE=model)

if USP_on:
   fixedBC = (BCfix, tie1, tie2, tie3, tie4, tie5, tie6, tie7, tie8, tie9, tie10, tie11, tie12, tie13, tie14, tie15, tieUSP1, tieUSP2, tieUSP3)
else:
	fixedBC = (BCfix, tie1, tie2, tie3, tie4, tie5, tie6, tie7, tie8, tie9, tie10, tie11, tie12, tie13, tie14, tie15, )


# ---------  Solution  --------------

if USP_on:
   fieldmat = AFFE_MATERIAU(AFFE=(_F(GROUP_MA=('ballaste', ),
                                    MATER=(balMx, )),
                                 _F(GROUP_MA=('sleepere', 'sleeper0', 'sleeper1'),
                                    MATER=(slpMx, )),
                                 _F(GROUP_MA=('USPe', 'USPe___0', 'USPe___1'),
                                    MATER=(USPMx, )),
                                 _F(GROUP_MA=groupsPadHard,
                                    MATER=(padhard, )),
                                 _F(GROUP_MA=groupsPadSoft,
                                    MATER=(padsoft, )),
                                 _F(GROUP_MA=('raile', 'raile__0'),
                                    MATER=(railMx, ))),
                           MAILLAGE=mesh,
                           MODELE=model)
else:
   fieldmat = AFFE_MATERIAU(AFFE=(_F(GROUP_MA=('ballaste', ),
                                    MATER=(balMx, )),
                                 _F(GROUP_MA=('sleepere', 'sleeper0', 'sleeper1'),
                                    MATER=(slpMx, )),
                                 _F(GROUP_MA=groupsPadHard,
                                    MATER=(padhard, )),
                                 _F(GROUP_MA=groupsPadSoft,
                                    MATER=(padsoft, )),
                                 _F(GROUP_MA=('raile', 'raile__0'),
                                    MATER=(railMx, ))),
                           MAILLAGE=mesh,
                           MODELE=model)



# M-shape load profile -> 71 time steps -> 101 steps to reach 0.1 s

Mimp=DEFI_FONCTION(NOM_PARA='INST',
                   VALE=(0,0,
                         0.001,0.00615583,
                         0.002,0.024471742,
                         0.003,0.054496738,
                         0.004,0.095491503,
                         0.005,0.146446609,
                         0.006,0.206107374,
                         0.007,0.27300475,
                         0.008,0.345491503,
                         0.009,0.421782767,
                         0.01,0.5,
                         0.011,0.578217233,
                         0.012,0.654508497,
                         0.013,0.72699525,
                         0.014,0.793892626,
                         0.015,0.853553391,
                         0.016,0.904508497,
                         0.017,0.945503262,
                         0.018,0.975528258,
                         0.019,0.99384417,
                         0.02,1, ###
                         0.021,0.99384417,
                         0.022,0.975528258,
                         0.023,0.945503262,
                         0.024,0.904508497,
                         0.025,0.853553391,
                         0.026,0.793892626,
                         0.027,0.72699525,
                         0.028,0.654508497,
                         0.029,0.578217233,
                         0.03,0.5,
                         0.031,0.427938597,
                         0.032,0.369963245,
                         0.033,0.327501488,
                         0.034,0.301598877,
                         0.035,0.292893219,
                         0.036,0.301598877,
                         0.037,0.327501488,
                         0.038,0.369963245,
                         0.039,0.427938597,
                         0.04,0.5,
                         0.041,0.578217233,
                         0.042,0.654508497,
                         0.043,0.72699525,
                         0.044,0.793892626,
                         0.045,0.853553391,
                         0.046,0.904508497,
                         0.047,0.945503262,
                         0.048,0.975528258,
                         0.049,0.99384417,
                         0.05,1, ###
                         0.051,0.99384417,
                         0.052,0.975528258,
                         0.053,0.945503262,
                         0.054,0.904508497,
                         0.055,0.853553391,
                         0.056,0.793892626,
                         0.057,0.72699525,
                         0.058,0.654508497,
                         0.059,0.578217233,
                         0.06,0.5,
                         0.061,0.421782767,
                         0.062,0.345491503,
                         0.063,0.27300475,
                         0.064,0.206107374,
                         0.065,0.146446609,
                         0.066,0.095491503,
                         0.067,0.054496738,
                         0.068,0.024471742,
                         0.069,0.00615583,
                         0.07,0,
                          ),
                   INFO=1,TITRE='Mimp',
                   PROL_DROITE='CONSTANT',);

# tsteps = 101
# tFin = 0.1

# time = DEFI_LIST_REEL(DEBUT=0.0,
                      # INFO=2,
                      # INTERVALLE=_F(JUSQU_A=tFin, NOMBRE=tsteps),
                      # TITRE='time')

# pyTime = np.append(np.linspace(0, 0.018, 3), np.linspace(0.018, 0.022, 5)) # start to before peak 1 + peak 1
# pyTime = np.append(pyTime,  np.linspace(0.022, 0.048, 5)) # + between peaks
# pyTime = np.append(pyTime,  np.linspace(0.048, 0.052, 5)) # + peak 2
# pyTime = np.append(pyTime,  np.linspace(0.052, 0.1, 6)) # + end
# pyTime = np.unique(pyTime)

pyTime = np.append(np.linspace(0, 0.015, 4), np.linspace(0.018, 0.022, 9)) # start to before peak 1 + peak 1
pyTime = np.append(pyTime, np.array([0.023, 0.024, 0.027, 0.031, 0.035])) # + between peaks
pyTime = np.unique(pyTime)

# pyTime = [0, 0.001]

dt = pyTime[1:] - pyTime[0:-1]
pasMaxi = max(dt)



time = DEFI_LIST_REEL(INFO=1,
                      VALE=pyTime,
                      TITRE='time')

deflist = DEFI_LIST_INST(DEFI_LIST=_F(LIST_INST=time,
                                      PAS_MINI=1e-07,
                                      PAS_MAXI=pasMaxi),
                         INFO=2,
                         METHODE='AUTO')
excit = []
for bc in fixedBC:
	excit.append(_F(CHARGE=bc,))
excit.append(_F(CHARGE=BCload,FONC_MULT=Mimp,))

# parallel iterative solver with single precision inverse as precond, robust and fast
SOLVOPT={'METHODE':'PETSC','PRE_COND':'LDLT_SP', 'MATR_DISTRIBUEE':'OUI'}  

#alternativement:
 
# parallel MUMPS, robust and pretty fast
#SOLVOPT={'ELIM_LAGR':'LAGR2','LOW_RANK_SEUIL':'1e-09', 'MATR_DISTRIBUEE':'OUI','METHODE':'MUMPS','RENUM':'SCOTCH'} 

# efficient iterative solver, best when using only one or two load cases
#SOLVOPT={'METHODE':'PETSC','PRE_COND':'BOOMER','MATR_DISTRIBUEE':'OUI'} 

resImp=STAT_NON_LINE(MODELE=model,
                     SOLVEUR=SOLVOPT,
                     CHAM_MATER=fieldmat,
                     CARA_ELEM=elemprop,
                     EXCIT=excit,
                     COMPORTEMENT=_F(RELATION='MFRONT',
                                     GROUP_MA=groupsAllPad,
                                     UNITE_LIBRAIRIE=11,
                                     NOM_ROUTINE='astergeneralizedmaxwell',),
                     INCREMENT=_F(LIST_INST= deflist,),
                     NEWTON=_F(REAC_INCR=1,
                               MATRICE='TANGENTE',
                               REAC_ITER=1,),
                     CONVERGENCE=_F(ITER_GLOB_MAXI=200,),
                     # ARCHIVAGE=_F(PAS_ARCH=1,),
                     ARCHIVAGE=_F(LIST_INST=time,),
                     );


resImp=CALC_CHAMP(reuse =resImp,
                  MODELE=model,
                  TOUT ='OUI',
                  CHAM_MATER=fieldmat,
                  CONTRAINTE =('SIGM_NOEU',),
                  RESULTAT=resImp,);

IMPR_RESU(FORMAT='MED',
          RESU=_F(PARTIE='REEL',
                  NOM_CHAM=('DEPL','VITE', 'SIGM_NOEU'),
                  NOM_CHAM_MED = ('displacement', 'velocity', 'stress'),
                  RESULTAT=resImp,),
          UNITE=81)


t2 = POST_RELEVE_T( ACTION = _F (RESULTAT=resImp,
				                 NOM_CHAM='SIGM_NOEU',
                                 INTITULE= 'StressInBal',
                                 GROUP_NO='balLoad',
                                 INVARIANT = 'OUI',
                                 OPERATION= 'EXTRACTION'    )  )

IMPR_TABLE(TABLE=t2,
           UNITE=8)

t3 = POST_RELEVE_T( ACTION = _F (RESULTAT=resImp,
				                 NOM_CHAM='SIGM_NOEU',
                                 INTITULE= 'StressInBal',
                                 GROUP_NO='balLoad',
                                 NOM_CMP= ('SIXX','SIYY','SIZZ','SIXY'),
                                 OPERATION= 'EXTRACTION'    )  )

IMPR_TABLE(TABLE=t3,
           UNITE=9)

dispRtop = RECU_FONCTION(GROUP_NO=('nodeF', ),
                      NOM_CHAM='DEPL',
                      NOM_CMP='DY',
                      RESULTAT=resImp)

dispR = RECU_FONCTION(GROUP_NO=('rntsl2_0', ),
                      NOM_CHAM='DEPL',
                      NOM_CMP='DY',
                      RESULTAT=resImp)

dispSa = RECU_FONCTION(GROUP_NO=('sntrlea0', ),
                      NOM_CHAM='DEPL',
                      NOM_CMP='DY',
                      RESULTAT=resImp)

dispSb = RECU_FONCTION(GROUP_NO=('sntrleb0', ),
                      NOM_CHAM='DEPL',
                      NOM_CMP='DY',
                      RESULTAT=resImp)

dispBotS = RECU_FONCTION(GROUP_NO=('botSlp_0', ),
                         NOM_CHAM='DEPL',
                         NOM_CMP='DY',
                         RESULTAT=resImp)

print('Times: ')
Resdatalines = []
for t in pyTime:
    print(t)
    val0 = dispRtop(t)
    val1 = dispR(t)
    val2 = (dispSa(t) + dispSb(t))/2
    val3 = dispBotS(t)
    line = str(t) + "\t" + str(val0) + "\t" + str(val1) + "\t" + str(val2) + "\t" + str(val3) + "\t" + "\n"
    Resdatalines.append(line)


#  end extraction loop: write data line to file

fileRES=open('fort.82','a+')
fileContent='\t'.join(Resdatalines) + '\n'
fileRES.write(fileContent)
fileRES.close()


FIN()


