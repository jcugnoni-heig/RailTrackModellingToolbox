@DSL       DefaultDSL;
@Behaviour GeneralizedMaxwell;
@Author    BenoÃ®t Bary;
@Date      8/10/2014; 

@Description{
  "Generalised Maxwell law"
}

@IntegerConstant Nv = 4;

@MaterialProperty real k0;
k0.setGlossaryName("BulkModulus");
@MaterialProperty real mu0;
mu0.setGlossaryName("ShearModulus");

@MaterialProperty real ki[Nv];
ki.setEntryName("ViscoelasticBulkModulus");
@MaterialProperty real mui[Nv];
mui.setEntryName("ViscoelasticShearModulus");
@MaterialProperty real taui[Nv];
taui.setEntryName("TimeScale");

@StateVariable StressStensor sej[Nv];
sej.setEntryName("ViscoelasticStress");

@LocalVariable stress l0;
@LocalVariable stress d[2];

@InitLocalVariables{
  l0 = k0-2*mu0/3;
}

@PredictionOperator{
  Dt = l0*Stensor4::IxI()+2*mu0*Stensor4::Id();
}

@Integrator{
  const auto id = Stensor::Id();
  const auto e = eto+deto;
  d   = {l0,2*mu0};
  sig = d[0]*trace(e)*id+d[1]*e;
  if(dt>0){
    for(unsigned short i=0;i!=Nv;++i){
      const auto edt = exp(-dt/taui[i]);
      const auto c   =  taui[i]*(1-edt)/dt;
      const auto c1  =    ki[i]*c;
      const auto c2  = 2*mui[i]*c;
      const auto pj  = trace(sej[i])*edt/3+c1*trace(deto); 
      d[0] += c1-c2/3;
      d[1] += c2;
      // updating stresses
      sej[i]  = deviator(sej[i])*edt+c2*deviator(deto)+pj*id;
      sig    += sej[i];
    }
  }
}

@TangentOperator{
  if(smt==CONSISTENTTANGENTOPERATOR){
    Dt = d[0]*Stensor4::IxI()+d[1]*Stensor4::Id();
  } else {
    Dt = l0*Stensor4::IxI()+2*mu0*Stensor4::Id();
  }
}

