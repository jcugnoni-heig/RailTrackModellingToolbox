from Utilitai import partitionimport timeimport osimport mathimport picklecoefEHard = 1.0coefTanDHard = 1.0coefESoft = 1.0coefTanDSoft = 1.0coefEBal = 1.0coefTanDBal = 1.0coefEUSP = 1.0coefTanDUSP = 1.0coefRhoBal = 1.0# import parametersparamFile = open('fort.22')content = paramFile.read()paramFile.close()exec(content)def DictToTuple(myDict):    temp = []    for val in myDict.values():        if val != ():            for id, grp in enumerate(val):                temp.append(grp)        myTuple = tuple(temp)    return myTupledef computeDistance(femodel, femesh, coords, ac_grps):    # distance function [m]        allGrps_dirI = DictToTuple(ac_grps)                dist = FORMULE(NOM_PARA=('X', 'Y', 'Z'),               VALE='sqrt(pow(X-XP,2)+pow(Y-YP,2)+pow(Z-ZP,2))/1000',               XP=coords[0], YP=coords[1], ZP=coords[2])    chFDist = CREA_CHAMP(AFFE=_F(GROUP_MA=allGrps_dirI,                             NOM_CMP=('X1', ),                             VALE_F=(dist, )),                     MODELE=femodel,                     OPERATION='AFFE',                     TYPE_CHAM='NOEU_NEUT_F')    chgeom = CREA_CHAMP(MAILLAGE=femesh,                    NOM_CHAM='GEOMETRIE',                    OPERATION='EXTR',                    TYPE_CHAM='NOEU_GEOM_R')    chDist = CREA_CHAMP(CHAM_F=chFDist,                    CHAM_PARA=(chgeom, ),                    OPERATION='EVAL',                    TYPE_CHAM='NOEU_NEUT_R')    DETRUIRE(CONCEPT=_F(NOM=(dist, chFDist, chgeom, )))    return chDistdef computePressure(femodel, chFpress, ac_grps, velocR, velocI):    p_rails_R = 0.0    p_rails_I = 0.0    p_sleepers_R = 0.0    p_sleepers_I = 0.0    p_ballast_R = 0.0    p_ballast_I = 0.0    pressAcR = CREA_CHAMP(CHAM_F=chFpress,                          CHAM_PARA=(chDist, CHk, CHcoef, velocR),                          OPERATION='EVAL',                          TYPE_CHAM='NOEU_NEUT_R')                              pressAcI = CREA_CHAMP(CHAM_F=chFpress,                          CHAM_PARA=(chDist, CHk, CHcoef, velocI),                          OPERATION='EVAL',                          TYPE_CHAM='NOEU_NEUT_R')    if ac_grps['rails'] != ():        intR_R = POST_ELEM(CHAM_GD=pressAcR,                           INTEGRALE=_F(GROUP_MA=ac_grps['rails'],                                        NOM_CMP=('X5', 'X6'),                                        TYPE_MAILLE='2D'),                           MODELE=femodel)        intR_I = POST_ELEM(CHAM_GD=pressAcI,                           INTEGRALE=_F(GROUP_MA=ac_grps['rails'],                                        NOM_CMP=('X5', 'X6'),                                        TYPE_MAILLE='2D'),                           MODELE=femodel)                                   p_rails_R = (intR_R['INTE_X5', 1] - intR_I['INTE_X6', 1])/1e6        p_rails_I = (intR_R['INTE_X6', 1] + intR_I['INTE_X5', 1])/1e6        DETRUIRE(CONCEPT=_F(NOM=(intR_R, intR_I, )))                if ac_grps['sleepers'] != ():        intS_R = POST_ELEM(CHAM_GD=pressAcR,                           INTEGRALE=_F(GROUP_MA=ac_grps['sleepers'],                                        NOM_CMP=('X5', 'X6'),                                        TYPE_MAILLE='2D'),                           MODELE=femodel)        intS_I = POST_ELEM(CHAM_GD=pressAcI,                           INTEGRALE=_F(GROUP_MA=ac_grps['sleepers'],                                        NOM_CMP=('X5', 'X6'),                                        TYPE_MAILLE='2D'),                           MODELE=femodel)                                   p_sleepers_R = (intS_R['INTE_X5', 1] - intS_I['INTE_X6', 1])/1e6        p_sleepers_I = (intS_R['INTE_X6', 1] + intS_I['INTE_X5', 1])/1e6        DETRUIRE(CONCEPT=_F(NOM=(intS_R, intS_I, )))                           if ac_grps['ballast'] != ():        intB_R = POST_ELEM(CHAM_GD=pressAcR,                           INTEGRALE=_F(GROUP_MA=ac_grps['ballast'],                                        NOM_CMP=('X5', 'X6'),                                        TYPE_MAILLE='2D'),                           MODELE=femodel)        intB_I = POST_ELEM(CHAM_GD=pressAcI,                           INTEGRALE=_F(GROUP_MA=ac_grps['ballast'],                                        NOM_CMP=('X5', 'X6'),                                        TYPE_MAILLE='2D'),                           MODELE=femodel)                                   p_ballast_R = (intB_R['INTE_X5', 1] - intB_I['INTE_X6', 1])/1e6        p_ballast_I = (intB_R['INTE_X6', 1] + intB_I['INTE_X5', 1])/1e6        DETRUIRE(CONCEPT=_F(NOM=(intB_R, intB_I, )))                                                        # integR = POST_ELEM(CHAM_GD=pressAcR,                       # INTEGRALE=_F(GROUP_MA=ac_grps,                                    # NOM_CMP=('X5', 'X6'),                                    # TYPE_MAILLE='2D'),                       # MODELE=femodel)    # integI = POST_ELEM(CHAM_GD=pressAcI,                       # INTEGRALE=_F(GROUP_MA=ac_grps,                                    # NOM_CMP=('X5', 'X6'),                                    # TYPE_MAILLE='2D'),                       # MODELE=femodel)    # COMPUTE REAL & IMAG PRESSURE    # total_pressure_real = (integR['INTE_X5', 1] - integI['INTE_X6', 1])/1e6    # total_pressure_imag = (integR['INTE_X6', 1] + integI['INTE_X5', 1])/1e6    DETRUIRE(CONCEPT=_F(NOM=(pressAcR, pressAcI, )))    return [p_rails_R, p_rails_I, p_sleepers_R, p_sleepers_I, p_ballast_R, p_ballast_I]POURSUITE(PAR_LOT='NON')# acoustic group_ma list for each direction (1 X, 2 Y, 3 Z) = directional acoustic contributionac_setList1 = {"rails" : (), "sleepers" : ("trAcX",), "ballast" : ()}ac_setList2 = {"rails" : ("railAcY",), "sleepers" : ("trAcY",), "ballast" : ("balAcY",)}ac_setList3 = {"rails" : ("raildAcZ", "railgAcZ",), "sleepers" : ("trAcZ",), "ballast" : ()} # 'raildAcI' 'railgAcI'# ac_setList1 = ('trAcX')# ac_setList2 = ('railAcY','trAcY', 'balAcY')# ac_setList3 = ('raildAcZ','railgAcZ','trAcZ') # 'raildAcI' 'railgAcI'ac_setList = {'X' : ac_setList1, 'Y' : ac_setList2, 'Z' : ac_setList3}# real and imaginary coefficients of the source radiation terms:# Re(-j*coef*exp(j*k*R)/R)=Re(-j*(cos(k*R)+j*sin(k*R))/R*coef)# = coef*sin(k*R)/R# Im(-j*coef*exp(j*k*R)/R)=-coef*cos(k*R)/R# dir = direction of velocity component, 1=X,2=Y,3=Z# X1=dist, X2=k, X3=coefcoefDisR = FORMULE(NOM_PARA=('X1', 'X2', 'X3'),                   VALE='X3*sin(X2*X1)/X1')coefDisI = FORMULE(NOM_PARA=('X1', 'X2', 'X3'),                   VALE='-X3*cos(X2*X1)/X1')# pressure formulas,# Re(pressure)=Re((coefDisR+j*coefDisI)*(velocR+j*velocI))# =Re(coefDisR*velocR-coefDisI*velocI+j*(coefDisI*velocR+coefDisR*velocI))# = coefDisR*velocR-coefDisI*velocI# Im(pressure)=coefDisI*velocR+coefDisR*velocI# PLEASE NOTE, model output is in mm/s, but we compute acoustics in SI units here#  velocity need to be converted to m/s , hence the /1000!pressFR1 = FORMULE(NOM_PARA=('X1', 'X2', 'X3', 'DX'),                   VALE='coefDisR(X1, X2, X3)*DX/1000.0',                   coefDisR=coefDisR)pressFI1 = FORMULE(NOM_PARA=('X1', 'X2', 'X3', 'DX'),                   VALE='coefDisI(X1, X2, X3)*DX/1000.0',                   coefDisI=coefDisI)pressFR2 = FORMULE(NOM_PARA=('X1', 'X2', 'X3', 'DY'),                   VALE='coefDisR(X1, X2, X3)*DY/1000.0',                   coefDisR=coefDisR)pressFI2 = FORMULE(NOM_PARA=('X1', 'X2', 'X3', 'DY'),                   VALE='coefDisI(X1, X2, X3)*DY/1000.0',                   coefDisI=coefDisI)pressFR3 = FORMULE(NOM_PARA=('X1', 'X2', 'X3', 'DZ'),                   VALE='coefDisR(X1, X2, X3)*DZ/1000.0',                   coefDisR=coefDisR)pressFI3 = FORMULE(NOM_PARA=('X1', 'X2', 'X3', 'DZ'),                   VALE='coefDisI(X1, X2, X3)*DZ/1000.0',                   coefDisI=coefDisI)if ac_setList['X'] != None:    setListX = DictToTuple(ac_setList['X'])    chFpres1 = CREA_CHAMP(AFFE=_F(GROUP_MA=setListX,                                  NOM_CMP=('X5', 'X6'),                                  VALE_F=(pressFR1, pressFI1)),                          MODELE=model,                          OPERATION='AFFE',                          TYPE_CHAM='NOEU_NEUT_F')if ac_setList['Y'] != None:    setListY = DictToTuple(ac_setList['Y'])    chFpres2 = CREA_CHAMP(AFFE=_F(GROUP_MA=setListY,                                   NOM_CMP=('X5', 'X6'),                                   VALE_F=(pressFR2, pressFI2)),                           MODELE=model,                           OPERATION='AFFE',                           TYPE_CHAM='NOEU_NEUT_F')if ac_setList['Z'] != None:    setListZ = DictToTuple(ac_setList['Z'])    chFpres3 = CREA_CHAMP(AFFE=_F(GROUP_MA=setListZ,                                  NOM_CMP=('X5', 'X6'),                                  VALE_F=(pressFR3, pressFI3)),                          MODELE=model,                          OPERATION='AFFE',                          TYPE_CHAM='NOEU_NEUT_F')# --------- INIT OUTPUT FILES ------------------frfgroups=['frfrailm', 'frfrailc'] # 'FRFtravg', 'FRFtravm'fileHeader='FREQ\t'for grp in frfgroups:    fileHeader += grp+'Y\t'+grp+'Z\t'fileHeader+='\n'fileFRF=open('fort.40','w')fileFRF.write(fileHeader)fileFRF.close()fileHeader='Acoustic power [W/N2]\nFreq [Hz]\tTotal\tRails\tSleepers\tBallast\n'filePow=open('fort.41','w')filePow.write(fileHeader)filePow.close()# --------- ACOUSTIC PARAMETERS   -------------------------c = 343.0rho = 1.21dirContribs = ['X', 'Y', 'Z']grid = LIRE_MAILLAGE(FORMAT='MED', UNITE=21)pyGrid = partition.MAIL_PY()pyGrid.FromAster('grid')nodeGrps = grid.LIST_GROUP_NO() # nodeGrps = [('myGrp1', nNodes1), ('myGrp2', nNodes2), ...]# allCoord = grid.sdj.COORDO.VALE.get()gridMod = AFFE_MODELE(AFFE=(_F(MODELISATION=('3D', ),                             PHENOMENE='MECANIQUE',                             TOUT='OUI'),),                      MAILLAGE=grid)# --------- Materials --------------EtaHard=LIRE_FONCTION(UNITE = 39,                   NOM_PARA = 'FREQ',                   PROL_GAUCHE = 'CONSTANT',                   PROL_DROITE = 'CONSTANT')EHard=LIRE_FONCTION(UNITE = 38,                 NOM_PARA = 'FREQ',                 PROL_GAUCHE = 'CONSTANT',                 PROL_DROITE = 'CONSTANT')EtaSoft=LIRE_FONCTION(UNITE = 29,                   NOM_PARA = 'FREQ',                   PROL_GAUCHE = 'CONSTANT',                   PROL_DROITE = 'CONSTANT')ESoft=LIRE_FONCTION(UNITE = 28,                 NOM_PARA = 'FREQ',                 PROL_GAUCHE = 'CONSTANT',                 PROL_DROITE = 'CONSTANT')EtaUSP=LIRE_FONCTION(UNITE = 49,                   NOM_PARA = 'FREQ',                   PROL_GAUCHE = 'CONSTANT',                   PROL_DROITE = 'CONSTANT')EUSP=LIRE_FONCTION(UNITE = 48,                 NOM_PARA = 'FREQ',                 PROL_GAUCHE = 'CONSTANT',                 PROL_DROITE = 'CONSTANT')                 EBalF=LIRE_FONCTION(UNITE = 58,                 NOM_PARA = 'FREQ',                 PROL_GAUCHE = 'CONSTANT',                 PROL_DROITE = 'CONSTANT')EtaBalF=LIRE_FONCTION(UNITE = 59,                 NOM_PARA = 'FREQ',                 PROL_GAUCHE = 'CONSTANT',                 PROL_DROITE = 'CONSTANT')                                concrRe = DEFI_MATERIAU(ELAS=_F(AMOR_HYST=0.016,                              E=46300.0,                              NU=0.2,                              RHO=2.4356e-09))# wood = DEFI_MATERIAU(ELAS=_F(AMOR_HYST=0.04,                              # E=46.33,                              # NU=0.3,                              # RHO=5.2e-10))                              # grav = DEFI_MATERIAU(ELAS=_F(AMOR_HYST=0.6*coefTanDBal,                              # E=5.0*coefEBal,                              # NU=0.3,                              # RHO=1.35e-9*coefRhoBal))                              steel = DEFI_MATERIAU(ELAS=_F(AMOR_HYST=0.001,                              E=210000.0,                              NU=0.3,                              RHO=7.85e-09))# ---------  Loads  --------------if includeUSPs == True:    fixedBC = (BCfix, tie1, tie2, tie3, tie4, tie5, tie6, tie7, tie8, tie9, tie10, tie11, tie12, tie13, tie14, tie15, tie16, tie17, tie18)else:    fixedBC = (BCfix, tie1, tie2, tie3, tie4, tie5, tie6, tie7, tie8, tie9, tie10, tie11, tie12, tie13, tie14, tie15, )# Re-import parameters... otherwise some change, idk whyparamFile = open('fort.22')content = paramFile.read()paramFile.close()exec(content)	BCload = AFFE_CHAR_MECA(FORCE_NODALE=_F(FX = force[0],                                        FY = force[1],                                        FZ = force[2],                                        GROUP_NO=(excitNode, )),                        MODELE=model)# ---------  Solution  --------------with open('fort.37') as freqFile:    freqlines = freqFile.read().splitlines()freqFile.close()listeAffe = []listeAffeI = []first=TrueacousticData = []# Re-import parameters... otherwise some change, idk whyparamFile = open('fort.22')content = paramFile.read()paramFile.close()exec(content)for freqline in freqlines:    t0 = time.time()    try:        frequency=float(freqline.split(' ')[0])    except:        continue    EH=EHard(frequency)    EtaH=EtaHard(frequency)    ES=ESoft(frequency)    EtaS=EtaSoft(frequency)    EBal = EBalF(frequency)    EtaBal = EtaBalF(frequency)    matHard = DEFI_MATERIAU(ELAS=_F(AMOR_HYST=EtaH*coefTanDHard,                                E=EH*coefEHard,                                NU=nuHard,                                RHO=rhoHard))    matSoft = DEFI_MATERIAU(ELAS=_F(AMOR_HYST=EtaS*coefTanDSoft,                                E=ES*coefESoft,                                NU=nuSoft,                                RHO=rhoSoft))                                    grav = DEFI_MATERIAU(ELAS=_F(AMOR_HYST=EtaBal*coefTanDBal,                                  E=EBal*coefEBal,                                  NU=balNu,                                  RHO=balRho*coefRhoBal))    if includeUSPs == True:        EU=EUSP(frequency)        EtaU=EtaUSP(frequency)                matUSP = DEFI_MATERIAU(ELAS=_F(AMOR_HYST=EtaU*coefTanDUSP,                                       E=EU*coefEUSP,                                       NU=USPNu,                                       RHO=USPRho))                                               fieldmat = AFFE_MATERIAU(AFFE=(_F(GROUP_MA=('ballast', ),                                          MATER=(grav, )),                                       _F(GROUP_MA=('tr3', 'tr2', 'tr1'),                                          MATER=(concrRe, )),                                       _F(GROUP_MA=groupsPadHard,                                          MATER=(matHard, )),                                       _F(GROUP_MA=groupsPadSoft,                                          MATER=(matSoft, )),                                       _F(GROUP_MA=('USP1', 'USP2', 'USP3'),                                          MATER=(matUSP, )),                                       _F(GROUP_MA=('raild', 'railg'),                                          MATER=(steel, ))),                                 MAILLAGE=mesh,                                 MODELE=model,                                 INFO=1)    else:        fieldmat = AFFE_MATERIAU(AFFE=(_F(GROUP_MA=('ballast', ),                                          MATER=(grav, )),                                       _F(GROUP_MA=('tr3', 'tr2', 'tr1'),                                          MATER=(concrRe, )),                                       _F(GROUP_MA=groupsPadHard,                                          MATER=(matHard, )),                                       _F(GROUP_MA=groupsPadSoft,                                          MATER=(matSoft, )),                                       _F(GROUP_MA=('raild', 'railg'),                                          MATER=(steel, ))),                                 MAILLAGE=mesh,                                 MODELE=model)    ASSEMBLAGE(#CARA_ELEM=elemprop,               CHAM_MATER=fieldmat,               CHARGE=fixedBC,               MATR_ASSE=(_F(MATRICE=CO('K'),                             OPTION='RIGI_MECA'),                          _F(MATRICE=CO('Khyst'),                             OPTION='RIGI_MECA_HYST'),                          _F(MATRICE=CO('M'),                             OPTION='MASS_MECA')),               MODELE=model,               NUME_DDL=CO('nddl'),               VECT_ASSE=_F(CHARGE=(BCload),                            OPTION='CHAR_MECA',                            VECTEUR=CO('f')))    if freqline == freqlines[0]:        resharm = DYNA_VIBRA(BASE_CALCUL='PHYS',                             #CARA_ELEM=elemprop,                             CHAM_MATER=fieldmat,                             EXCIT=_F(COEF_MULT=1.0,                                      VECT_ASSE=f),                             FREQ=(frequency),                             MATR_MASS=M,                             MATR_RIGI=Khyst,                             MODELE=model,                             SOLVEUR=_F(METHODE='MUMPS', RENUM='METIS'),                             NOM_CHAM=('DEPL','VITE','ACCE'),                             TYPE_CALCUL='HARM')    else:        resharm = DYNA_VIBRA(reuse = resharm,                             RESULTAT = resharm,                             BASE_CALCUL='PHYS',                             #CARA_ELEM=elemprop,                             CHAM_MATER=fieldmat,                             EXCIT=_F(COEF_MULT=1.0,                                      VECT_ASSE=f),                             FREQ=(frequency),                             MATR_MASS=M,                             MATR_RIGI=Khyst,                             MODELE=model,                             SOLVEUR=_F(METHODE='MUMPS', RENUM='METIS'),                             NOM_CHAM=('DEPL','VITE','ACCE'),                             TYPE_CALCUL='HARM')    t00 = time.time()    print('harmonic f=' + str(int(frequency)) + 'Hz, ' + str(t00-t0) + ' s.')    # frf extraction loop    FRFdataline=[str(frequency),]    for grp in frfgroups:        newPtZ = RECU_FONCTION(GROUP_NO=(grp, ),                        NOM_CHAM='ACCE',                        NOM_CMP='DZ',                        RESULTAT=resharm)        newPtY = RECU_FONCTION(GROUP_NO=(grp, ),                        NOM_CHAM='ACCE',                        NOM_CMP='DY',                        RESULTAT=resharm)        newPtZ_R=CALC_FONCTION(EXTRACTION=_F(FONCTION=newPtZ, PARTIE='MODULE'))        newPtY_R=CALC_FONCTION(EXTRACTION=_F(FONCTION=newPtY, PARTIE='MODULE'))        AcZ_GpN = newPtZ_R(frequency)/1000.0/9.81/(force[0]**2 + force[1]**2 + force[2]**2)**(1/2)        AcY_GpN = newPtY_R(frequency)/1000.0/9.81/(force[0]**2 + force[1]**2 + force[2]**2)**(1/2)        FRFdataline.append(str(AcY_GpN))        FRFdataline.append(str(AcZ_GpN))        DETRUIRE(CONCEPT=_F(NOM=(newPtZ, newPtY, newPtZ_R, newPtY_R)))    #  end FRF extraction loop: write data line to file    fileContent='\t'.join(FRFdataline) + '\n'    fileFRF=open('fort.40','a+')    fileFRF.write(fileContent)    fileFRF.close()##########################################################################################################   End of harmonic, start acoustic   #######################################################################################################    print(computeAcoustic)    if computeAcoustic == True:            print('A')        # Extract velocity field, which will be used to compute accoustic pressure at all mesh grid nodes        velocity = CREA_CHAMP(FREQ=frequency,                             NOM_CHAM='VITE',                             OPERATION='EXTR',                             RESULTAT=resharm,                             TYPE_CHAM='NOEU_DEPL_C')        velocR = CREA_CHAMP(CHAM_GD=velocity,                        OPERATION='C2R',                        PARTIE='REEL',                        TYPE_CHAM='NOEU_DEPL_R')        velocI = CREA_CHAMP(CHAM_GD=velocity,                        OPERATION='C2R',                        PARTIE='IMAG',                        TYPE_CHAM='NOEU_DEPL_R')        #wave number & acoustic source coefficient        omega = 2 * math.pi * frequency        k = omega / c        coef = rho * c * k / 2.0 / math.pi        # These two constant fields are used in CHAM_PARA, in ComputePressure()        CHk = CREA_CHAMP(OPERATION='AFFE',TYPE_CHAM='NOEU_NEUT_R', MODELE=model, AFFE=_F(TOUT='OUI', NOM_CMP=('X2'),VALE=k));        CHcoef = CREA_CHAMP(OPERATION='AFFE',TYPE_CHAM='NOEU_NEUT_R', MODELE=model, AFFE=_F(TOUT='OUI', NOM_CMP=('X3'),VALE=coef));        t1 = time.time()        # Iterate over grid nodes (mesh groups)        for grp in nodeGrps:            grpName = grp[0]            gpNode = pyGrid.gno.get(grpName)            node = gpNode[0] # suppose exactly 1 node per GROUP_NO... Otherwise, should iterate over gpNode            coords = pyGrid.cn[node]                        nodeDict = None            for nd in acousticData:                if nd['ID'] == node+1:                    nodeDict = nd                    break                                if nodeDict == None:                nodeDict = {'ID' : node+1, 'coords' : coords, 'freqs' : [], 'p_tot_R' : [], 'p_tot_I' : [], 'p_rails_R' : [], 'p_rails_I' : [], 'p_sleepers_R' : [], 'p_sleepers_I' : [], 'p_ballast_R' : [], 'p_ballast_I' : [] }                acousticData.append(nodeDict)                              pressR = 0            pressI = 0                        p_rails_R = 0            p_rails_I = 0            p_sleepers_R = 0            p_sleepers_I = 0            p_ballast_R = 0            p_ballast_I = 0            # Iterate over directions. When myPoint is created, one decides which global directions it will be affected by.            # ac_setList is a dict containing the GROUP_MA tuples for 'X', 'Y' and 'Z' pressure contributions.            for dir in dirContribs:                # Compute distance field for acoustic computation. A field will be created over "ac_setList[dir]".                # Its value on a given node is the distance between that node and our node "grp".                chDist=computeDistance(model, mesh, nodeDict['coords'], ac_setList[dir])                # acoustic computations                if dir == 'X':                    pI_rails_R, pI_rails_I, pI_sleepers_R, pI_sleepers_I, pI_ballast_R, pI_ballast_I = computePressure(model, chFpres1, ac_setList[dir], velocR, velocI)                elif dir == 'Y':                    pI_rails_R, pI_rails_I, pI_sleepers_R, pI_sleepers_I, pI_ballast_R, pI_ballast_I = computePressure(model, chFpres2, ac_setList[dir], velocR, velocI)                elif dir == 'Z':                    pI_rails_R, pI_rails_I, pI_sleepers_R, pI_sleepers_I, pI_ballast_R, pI_ballast_I = computePressure(model, chFpres3, ac_setList[dir], velocR, velocI)                                p_rails_R += pI_rails_R                p_rails_I += pI_rails_I                p_sleepers_R += pI_sleepers_R                p_sleepers_I += pI_sleepers_I                p_ballast_R += pI_ballast_R                p_ballast_I += pI_ballast_I                DETRUIRE(CONCEPT=_F(NOM=(chDist,)))                # loop with next direction contributing to pressure            ## Comment following lines to try and reduce most actions done in this loop            p_tot_R = p_rails_R + p_sleepers_R + p_ballast_R            p_tot_I = p_rails_I + p_sleepers_I + p_ballast_I                        I_tot = (p_tot_R**2 + p_tot_I**2)/(rho*c)            I_rails = (p_rails_R**2 + p_rails_I**2)/(rho*c)            I_sleepers = (p_sleepers_R**2 + p_sleepers_I**2)/(rho*c)            I_ballast = (p_ballast_R**2 + p_ballast_I**2)/(rho*c)                        nodeDict['freqs'].append(frequency)            nodeDict['p_tot_R'].append(p_tot_R)            nodeDict['p_tot_I'].append(p_tot_I)            nodeDict['p_rails_R'].append(p_rails_R)            nodeDict['p_rails_I'].append(p_rails_I)            nodeDict['p_sleepers_R'].append(p_sleepers_R)            nodeDict['p_sleepers_I'].append(p_sleepers_I)            nodeDict['p_ballast_R'].append(p_ballast_R)            nodeDict['p_ballast_I'].append(p_ballast_I)            # nodeDict.update({ 'freqs' : nodeDict['freqs'].append(frequency) })            # nodeDict.update({ 'p_tot_R' : nodeDict['p_tot_R'].append(p_tot_R) })            # nodeDict.update({ 'p_tot_I' : nodeDict['p_tot_I'].append(p_tot_I) })            # nodeDict.update({ 'p_rails_R' : nodeDict['p_rails_R'].append(p_rails_R) })            # nodeDict.update({ 'p_rails_I' : nodeDict['p_rails_I'].append(p_rails_I) })            # nodeDict.update({ 'p_sleepers_R' : nodeDict['p_sleepers_R'].append(p_sleepers_R) })            # nodeDict.update({ 'p_sleepers_I' : nodeDict['p_sleepers_I'].append(p_sleepers_I) })               listeAffe.append(_F(GROUP_NO=grpName, NOM_CMP=('X1', 'X2', 'X3', 'X4', 'X5', 'X6', 'X7', 'X8'), VALE=(p_tot_R, p_tot_I, p_rails_R, p_rails_I, p_sleepers_R, p_sleepers_I, p_ballast_R, p_ballast_I),))            listeAffeI.append(_F(GROUP_NO=grpName, NOM_CMP=('X1', 'X2', 'X3', 'X4'), VALE=(I_tot, I_rails, I_sleepers, I_ballast),))            # loop with next acoustic grid node        t2 = time.time()        print('accoustic f=' + str(int(frequency)) + 'Hz, ' + str(t2-t1) + ' / ' + str(len(nodeGrps)) + ' = ' + str((t2-t1)/len(nodeGrps)) + 's/node.')                CH_pAc = CREA_CHAMP(OPERATION = 'AFFE',                            TYPE_CHAM ='NOEU_NEUT_R',                            MAILLAGE = grid ,                            AFFE = (listeAffe))                                      if freqline == freqlines[0]:            RESpre=CREA_RESU(OPERATION='AFFE',TYPE_RESU='DYNA_HARMO',NOM_CHAM='UT01_NOEU',AFFE=_F(CHAM_GD=CH_pAc, FREQ=frequency),);        else:            RESpre=CREA_RESU(reuse=RESpre, RESULTAT=RESpre, OPERATION='AFFE',TYPE_RESU='DYNA_HARMO',NOM_CHAM='UT01_NOEU',AFFE=_F(CHAM_GD=CH_pAc, FREQ=frequency),);                                      CH_Iac = CREA_CHAMP(OPERATION = 'AFFE',                              TYPE_CHAM ='NOEU_NEUT_R',                              MAILLAGE = grid ,                              AFFE = (listeAffeI))        intField = POST_ELEM(CHAM_GD=CH_Iac,                             INTEGRALE=_F(TOUT='OUI',                                          NOM_CMP=('X1', 'X2', 'X3', 'X4'),                                          TYPE_MAILLE='2D'),                             MODELE=gridMod)        W_tot = intField['INTE_X1',1]/1e6/(force[0]**2 + force[1]**2 + force[2]**2) # in W/N^2        W_rails = intField['INTE_X2',1]/1e6/(force[0]**2 + force[1]**2 + force[2]**2)        W_sleepers = intField['INTE_X3',1]/1e6/(force[0]**2 + force[1]**2 + force[2]**2)        W_ballast = intField['INTE_X4',1]/1e6/(force[0]**2 + force[1]**2 + force[2]**2)                dataLine = [str(frequency), str(W_tot), str(W_rails), str(W_sleepers), str(W_ballast)]        fileContent = '\t'.join(dataLine) + '\n'    #dataLine=["abc", "def", ...]                filePow=open('fort.41','a+')        filePow.write(fileContent)        filePow.close()                   DETRUIRE(CONCEPT=_F(NOM=(velocity, velocR, velocI, CHk, CHcoef, CH_pAc, CH_Iac, intField)))        # end of "if(acoustic)"    # 'nddl' seems to be needed in IMPR_RESU() at the end    DETRUIRE(CONCEPT=_F(NOM=(matSoft, matHard, grav, fieldmat)))    if includeUSPs == True:        DETRUIRE(CONCEPT=_F(NOM=(matUSP)))            if freqline != freqlines[-1]:        DETRUIRE(OBJET=_F(CHAINE=('K','Khyst','M','f','nddl')))    # loop with next frequency##########################################################################################################   End of loop   #######################################################################################################IMPR_RESU(INFO=2, FORMAT='MED',          RESU=_F(PARTIE='REEL',                  NOM_CHAM=('DEPL','VITE'),                  NOM_CHAM_MED = ('displacement', 'velocity'),                  RESULTAT=resharm,),          UNITE=81)                                        if computeAcoustic == True:     IMPR_RESU(INFO=2, FORMAT='MED',              RESU=_F(PARTIE='REEL',                      NOM_CHAM='UT01_NOEU',                      NOM_CHAM_MED = 'acPressure',                      RESULTAT=RESpre,),              UNITE=80)                  pickle_out = open('fort.42',"wb")    try: pickle.dump(acousticData, pickle_out, protocol=2)    except: pickle.dump(None, pickle_out, protocol=2)    pickle_out.close()FIN()